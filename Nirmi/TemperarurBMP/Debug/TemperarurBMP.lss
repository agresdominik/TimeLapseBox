
TemperarurBMP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00001302  00001396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  00800148  00800148  000013de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014e6  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba1  00000000  00000000  00002a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aaf  00000000  00000000  00003607  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  000040b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000706  00000000  00000000  000043b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b53  00000000  00000000  00004aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000560d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__vector_18>
      4c:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_19>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__vector_18+0x46>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	11 e0       	ldi	r17, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	e2 e0       	ldi	r30, 0x02	; 2
      fe:	f3 e1       	ldi	r31, 0x13	; 19
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a8 34       	cpi	r26, 0x48	; 72
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	a8 e4       	ldi	r26, 0x48	; 72
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	af 3a       	cpi	r26, 0xAF	; 175
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 17 05 	call	0xa2e	; 0xa2e <main>
     120:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <bmp280_writemem>:
// We provide wrapper macros for them in bmp280.h.
int32_t _bmp280_temp;
uint32_t _bmp280_pres;

static void bmp280_writemem(uint8_t reg, uint8_t value)
{
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	d8 2f       	mov	r29, r24
     12e:	c6 2f       	mov	r28, r22
	i2c_start_wait((BMP280_ADDR << 1) | I2C_WRITE);
     130:	8c ee       	ldi	r24, 0xEC	; 236
     132:	0e 94 f7 03 	call	0x7ee	; 0x7ee <i2c_start_wait>
	i2c_write(reg);
     136:	8d 2f       	mov	r24, r29
     138:	0e 94 29 04 	call	0x852	; 0x852 <i2c_write>
	i2c_write(value);
     13c:	8c 2f       	mov	r24, r28
     13e:	0e 94 29 04 	call	0x852	; 0x852 <i2c_write>
	i2c_stop();
     142:	0e 94 21 04 	call	0x842	; 0x842 <i2c_stop>
}
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <bmp280_readmem>:

void bmp280_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes)
{
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	c8 2f       	mov	r28, r24
     156:	8b 01       	movw	r16, r22
     158:	d4 2f       	mov	r29, r20
	uint8_t i =0;
	i2c_start_wait((BMP280_ADDR << 1) | I2C_WRITE);
     15a:	8c ee       	ldi	r24, 0xEC	; 236
     15c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <i2c_start_wait>
	i2c_write(reg);
     160:	8c 2f       	mov	r24, r28
     162:	0e 94 29 04 	call	0x852	; 0x852 <i2c_write>
	i2c_rep_start((BMP280_ADDR << 1) | I2C_READ);
     166:	8d ee       	ldi	r24, 0xED	; 237
     168:	0e 94 1e 04 	call	0x83c	; 0x83c <i2c_rep_start>

	for(i=0; i<bytes; i++) {
     16c:	c0 e0       	ldi	r28, 0x00	; 0
     16e:	16 c0       	rjmp	.+44     	; 0x19c <bmp280_readmem+0x50>
		if(i==bytes-1)
     170:	2c 2f       	mov	r18, r28
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	8d 2f       	mov	r24, r29
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	28 17       	cp	r18, r24
     17c:	39 07       	cpc	r19, r25
     17e:	39 f4       	brne	.+14     	; 0x18e <bmp280_readmem+0x42>
			buff[i] = i2c_readNak();
     180:	0e 94 45 04 	call	0x88a	; 0x88a <i2c_readNak>
     184:	f8 01       	movw	r30, r16
     186:	ec 0f       	add	r30, r28
     188:	f1 1d       	adc	r31, r1
     18a:	80 83       	st	Z, r24
     18c:	06 c0       	rjmp	.+12     	; 0x19a <bmp280_readmem+0x4e>
		else
			buff[i] = i2c_readAck();
     18e:	0e 94 3b 04 	call	0x876	; 0x876 <i2c_readAck>
     192:	f8 01       	movw	r30, r16
     194:	ec 0f       	add	r30, r28
     196:	f1 1d       	adc	r31, r1
     198:	80 83       	st	Z, r24
	uint8_t i =0;
	i2c_start_wait((BMP280_ADDR << 1) | I2C_WRITE);
	i2c_write(reg);
	i2c_rep_start((BMP280_ADDR << 1) | I2C_READ);

	for(i=0; i<bytes; i++) {
     19a:	cf 5f       	subi	r28, 0xFF	; 255
     19c:	cd 17       	cp	r28, r29
     19e:	40 f3       	brcs	.-48     	; 0x170 <bmp280_readmem+0x24>
		if(i==bytes-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
     1a0:	0e 94 21 04 	call	0x842	; 0x842 <i2c_stop>
}
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	1f 91       	pop	r17
     1aa:	0f 91       	pop	r16
     1ac:	08 95       	ret

000001ae <bmp280_getcalibration>:
/*
 * read calibration registers
 */
static void bmp280_getcalibration(void)
{
	memset(bmp280_cal.bytes, 0, sizeof(bmp280_cal));
     1ae:	8a e1       	ldi	r24, 0x1A	; 26
     1b0:	e8 e4       	ldi	r30, 0x48	; 72
     1b2:	f1 e0       	ldi	r31, 0x01	; 1
     1b4:	df 01       	movw	r26, r30
     1b6:	1d 92       	st	X+, r1
     1b8:	8a 95       	dec	r24
     1ba:	e9 f7       	brne	.-6      	; 0x1b6 <bmp280_getcalibration+0x8>

	bmp280_readmem(
     1bc:	4a e1       	ldi	r20, 0x1A	; 26
     1be:	bf 01       	movw	r22, r30
     1c0:	88 e8       	ldi	r24, 0x88	; 136
     1c2:	0e 94 a6 00 	call	0x14c	; 0x14c <bmp280_readmem>
     1c6:	08 95       	ret

000001c8 <bmp280_get_status>:

	return 1;
}

uint8_t bmp280_get_status(void)
{
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	1f 92       	push	r1
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
	uint8_t data[1];
	bmp280_readmem(BMP280_STATUS_REG, data, 1);
     1d2:	41 e0       	ldi	r20, 0x01	; 1
     1d4:	be 01       	movw	r22, r28
     1d6:	6f 5f       	subi	r22, 0xFF	; 255
     1d8:	7f 4f       	sbci	r23, 0xFF	; 255
     1da:	83 ef       	ldi	r24, 0xF3	; 243
     1dc:	0e 94 a6 00 	call	0x14c	; 0x14c <bmp280_readmem>
	BMP280_DEBUG("Status", data[0]);
	return data[0];
}
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
     1e2:	0f 90       	pop	r0
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <bmp280_set_ctrl>:

void bmp280_set_ctrl(uint8_t osrs_t, uint8_t osrs_p, uint8_t mode)
{
	bmp280_writemem(BMP280_CONTROL_REG,
		((osrs_t & 0x7) << 5)
     1ea:	20 e2       	ldi	r18, 0x20	; 32
     1ec:	82 9f       	mul	r24, r18
     1ee:	c0 01       	movw	r24, r0
     1f0:	11 24       	eor	r1, r1
		| ((osrs_p & 0x7) << 2)
     1f2:	67 70       	andi	r22, 0x07	; 7
     1f4:	26 2f       	mov	r18, r22
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	22 0f       	add	r18, r18
     1fa:	33 1f       	adc	r19, r19
     1fc:	22 0f       	add	r18, r18
     1fe:	33 1f       	adc	r19, r19
	return data[0];
}

void bmp280_set_ctrl(uint8_t osrs_t, uint8_t osrs_p, uint8_t mode)
{
	bmp280_writemem(BMP280_CONTROL_REG,
     200:	28 2b       	or	r18, r24
     202:	43 70       	andi	r20, 0x03	; 3
     204:	62 2f       	mov	r22, r18
     206:	64 2b       	or	r22, r20
     208:	84 ef       	ldi	r24, 0xF4	; 244
     20a:	0e 94 94 00 	call	0x128	; 0x128 <bmp280_writemem>
     20e:	08 95       	ret

00000210 <bmp280_set_config>:
}

void bmp280_set_config(uint8_t t_sb, uint8_t filter, uint8_t spi3w_en)
{
	bmp280_writemem(BMP280_CONFIG_REG,
		((t_sb & 0x7) << 5)
     210:	20 e2       	ldi	r18, 0x20	; 32
     212:	82 9f       	mul	r24, r18
     214:	c0 01       	movw	r24, r0
     216:	11 24       	eor	r1, r1
		| ((filter & 0x7) << 2)
     218:	67 70       	andi	r22, 0x07	; 7
     21a:	26 2f       	mov	r18, r22
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	22 0f       	add	r18, r18
     220:	33 1f       	adc	r19, r19
     222:	22 0f       	add	r18, r18
     224:	33 1f       	adc	r19, r19
	);
}

void bmp280_set_config(uint8_t t_sb, uint8_t filter, uint8_t spi3w_en)
{
	bmp280_writemem(BMP280_CONFIG_REG,
     226:	28 2b       	or	r18, r24
     228:	41 70       	andi	r20, 0x01	; 1
     22a:	62 2f       	mov	r22, r18
     22c:	64 2b       	or	r22, r20
     22e:	85 ef       	ldi	r24, 0xF5	; 245
     230:	0e 94 94 00 	call	0x128	; 0x128 <bmp280_writemem>
     234:	08 95       	ret

00000236 <bmp280_init>:
	BMP280_DEBUG("P8", bmp280_cal.dig_p8);
	BMP280_DEBUG("P9", bmp280_cal.dig_p9);
}

uint8_t bmp280_init(void)
{
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	1f 92       	push	r1
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[1];
#ifdef BMP280_I2CINIT
        i2c_init();
     240:	0e 94 cb 03 	call	0x796	; 0x796 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     244:	83 e0       	ldi	r24, 0x03	; 3
     246:	8a 95       	dec	r24
     248:	f1 f7       	brne	.-4      	; 0x246 <bmp280_init+0x10>
     24a:	00 00       	nop
        _delay_us(10);
#endif

	// look up the ID register
	buffer[0] = 0;
     24c:	19 82       	std	Y+1, r1	; 0x01
	bmp280_readmem(BMP280_ID_REG, buffer, 1);
     24e:	41 e0       	ldi	r20, 0x01	; 1
     250:	be 01       	movw	r22, r28
     252:	6f 5f       	subi	r22, 0xFF	; 255
     254:	7f 4f       	sbci	r23, 0xFF	; 255
     256:	80 ed       	ldi	r24, 0xD0	; 208
     258:	0e 94 a6 00 	call	0x14c	; 0x14c <bmp280_readmem>
	if (buffer[0] != BMP280_ID_VAL)
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	88 35       	cpi	r24, 0x58	; 88
     260:	71 f4       	brne	.+28     	; 0x27e <bmp280_init+0x48>
		return 0;

	bmp280_getcalibration();
     262:	0e 94 d7 00 	call	0x1ae	; 0x1ae <bmp280_getcalibration>
	bmp280_set_config(0, 4, 0); // 0.5 ms delay, 16x filter, no 3-wire SPI
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	64 e0       	ldi	r22, 0x04	; 4
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	0e 94 08 01 	call	0x210	; 0x210 <bmp280_set_config>
	bmp280_set_ctrl(2, 5, 3); // T oversample x2, P over x2, normal mode
     270:	43 e0       	ldi	r20, 0x03	; 3
     272:	65 e0       	ldi	r22, 0x05	; 5
     274:	82 e0       	ldi	r24, 0x02	; 2
     276:	0e 94 f5 00 	call	0x1ea	; 0x1ea <bmp280_set_ctrl>

	return 1;
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	01 c0       	rjmp	.+2      	; 0x280 <bmp280_init+0x4a>

	// look up the ID register
	buffer[0] = 0;
	bmp280_readmem(BMP280_ID_REG, buffer, 1);
	if (buffer[0] != BMP280_ID_VAL)
		return 0;
     27e:	80 e0       	ldi	r24, 0x00	; 0
	bmp280_getcalibration();
	bmp280_set_config(0, 4, 0); // 0.5 ms delay, 16x filter, no 3-wire SPI
	bmp280_set_ctrl(2, 5, 3); // T oversample x2, P over x2, normal mode

	return 1;
}
     280:	0f 90       	pop	r0
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	08 95       	ret

00000288 <bmp280_measure>:
	| ((int32_t)(b2) << 4) \
	| ((int32_t)(b3) >> 4) \
)
	
void bmp280_measure(void)
{
     288:	4f 92       	push	r4
     28a:	5f 92       	push	r5
     28c:	6f 92       	push	r6
     28e:	7f 92       	push	r7
     290:	8f 92       	push	r8
     292:	9f 92       	push	r9
     294:	af 92       	push	r10
     296:	bf 92       	push	r11
     298:	cf 92       	push	r12
     29a:	df 92       	push	r13
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	2a 97       	sbiw	r28, 0x0a	; 10
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[BMP280_RAWDATA_BYTES];
	int32_t temp_raw, pres_raw,
		var1, var2, t_fine;
	
	// read the raw ADC data from the I2C registers
	bmp280_readmem(BMP280_PRES_REG, data, BMP280_RAWDATA_BYTES);
     2b4:	46 e0       	ldi	r20, 0x06	; 6
     2b6:	be 01       	movw	r22, r28
     2b8:	6f 5f       	subi	r22, 0xFF	; 255
     2ba:	7f 4f       	sbci	r23, 0xFF	; 255
     2bc:	87 ef       	ldi	r24, 0xF7	; 247
     2be:	0e 94 a6 00 	call	0x14c	; 0x14c <bmp280_readmem>
	pres_raw = bmp280_20bit_reg(data[0], data[1], data[2]);
     2c2:	89 80       	ldd	r8, Y+1	; 0x01
     2c4:	91 2c       	mov	r9, r1
     2c6:	a1 2c       	mov	r10, r1
     2c8:	b1 2c       	mov	r11, r1
     2ca:	b5 01       	movw	r22, r10
     2cc:	a4 01       	movw	r20, r8
     2ce:	03 2e       	mov	r0, r19
     2d0:	3c e0       	ldi	r19, 0x0C	; 12
     2d2:	44 0f       	add	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	66 1f       	adc	r22, r22
     2d8:	77 1f       	adc	r23, r23
     2da:	3a 95       	dec	r19
     2dc:	d1 f7       	brne	.-12     	; 0x2d2 <bmp280_measure+0x4a>
     2de:	30 2d       	mov	r19, r0
     2e0:	8a 81       	ldd	r24, Y+2	; 0x02
     2e2:	88 2e       	mov	r8, r24
     2e4:	91 2c       	mov	r9, r1
     2e6:	a1 2c       	mov	r10, r1
     2e8:	b1 2c       	mov	r11, r1
     2ea:	88 0c       	add	r8, r8
     2ec:	99 1c       	adc	r9, r9
     2ee:	aa 1c       	adc	r10, r10
     2f0:	bb 1c       	adc	r11, r11
     2f2:	88 0c       	add	r8, r8
     2f4:	99 1c       	adc	r9, r9
     2f6:	aa 1c       	adc	r10, r10
     2f8:	bb 1c       	adc	r11, r11
     2fa:	88 0c       	add	r8, r8
     2fc:	99 1c       	adc	r9, r9
     2fe:	aa 1c       	adc	r10, r10
     300:	bb 1c       	adc	r11, r11
     302:	88 0c       	add	r8, r8
     304:	99 1c       	adc	r9, r9
     306:	aa 1c       	adc	r10, r10
     308:	bb 1c       	adc	r11, r11
     30a:	84 2a       	or	r8, r20
     30c:	95 2a       	or	r9, r21
     30e:	a6 2a       	or	r10, r22
     310:	b7 2a       	or	r11, r23
     312:	8b 81       	ldd	r24, Y+3	; 0x03
     314:	82 95       	swap	r24
     316:	8f 70       	andi	r24, 0x0F	; 15
     318:	a5 01       	movw	r20, r10
     31a:	94 01       	movw	r18, r8
     31c:	28 2b       	or	r18, r24
     31e:	2f 83       	std	Y+7, r18	; 0x07
     320:	38 87       	std	Y+8, r19	; 0x08
     322:	49 87       	std	Y+9, r20	; 0x09
     324:	5a 87       	std	Y+10, r21	; 0x0a
	temp_raw = bmp280_20bit_reg(data[3], data[4], data[5]);
     326:	cc 80       	ldd	r12, Y+4	; 0x04
     328:	d1 2c       	mov	r13, r1
     32a:	e1 2c       	mov	r14, r1
     32c:	f1 2c       	mov	r15, r1
     32e:	b7 01       	movw	r22, r14
     330:	a6 01       	movw	r20, r12
     332:	03 2e       	mov	r0, r19
     334:	3c e0       	ldi	r19, 0x0C	; 12
     336:	44 0f       	add	r20, r20
     338:	55 1f       	adc	r21, r21
     33a:	66 1f       	adc	r22, r22
     33c:	77 1f       	adc	r23, r23
     33e:	3a 95       	dec	r19
     340:	d1 f7       	brne	.-12     	; 0x336 <bmp280_measure+0xae>
     342:	30 2d       	mov	r19, r0
     344:	8d 81       	ldd	r24, Y+5	; 0x05
     346:	c8 2e       	mov	r12, r24
     348:	d1 2c       	mov	r13, r1
     34a:	e1 2c       	mov	r14, r1
     34c:	f1 2c       	mov	r15, r1
     34e:	cc 0c       	add	r12, r12
     350:	dd 1c       	adc	r13, r13
     352:	ee 1c       	adc	r14, r14
     354:	ff 1c       	adc	r15, r15
     356:	cc 0c       	add	r12, r12
     358:	dd 1c       	adc	r13, r13
     35a:	ee 1c       	adc	r14, r14
     35c:	ff 1c       	adc	r15, r15
     35e:	cc 0c       	add	r12, r12
     360:	dd 1c       	adc	r13, r13
     362:	ee 1c       	adc	r14, r14
     364:	ff 1c       	adc	r15, r15
     366:	cc 0c       	add	r12, r12
     368:	dd 1c       	adc	r13, r13
     36a:	ee 1c       	adc	r14, r14
     36c:	ff 1c       	adc	r15, r15
     36e:	c4 2a       	or	r12, r20
     370:	d5 2a       	or	r13, r21
     372:	e6 2a       	or	r14, r22
     374:	f7 2a       	or	r15, r23
     376:	8e 81       	ldd	r24, Y+6	; 0x06
     378:	82 95       	swap	r24
     37a:	8f 70       	andi	r24, 0x0F	; 15
     37c:	c8 2a       	or	r12, r24

	// The following code is based on a 32-bit integer code
	// from the BMP280 datasheet

	// compute the temperature
	var1 = ((((temp_raw >> 3) - ((int32_t)bmp280_cal.dig_t1 << 1)))
     37e:	b7 01       	movw	r22, r14
     380:	a6 01       	movw	r20, r12
     382:	68 94       	set
     384:	12 f8       	bld	r1, 2
     386:	75 95       	asr	r23
     388:	67 95       	ror	r22
     38a:	57 95       	ror	r21
     38c:	47 95       	ror	r20
     38e:	16 94       	lsr	r1
     390:	d1 f7       	brne	.-12     	; 0x386 <bmp280_measure+0xfe>
     392:	e8 e4       	ldi	r30, 0x48	; 72
     394:	f1 e0       	ldi	r31, 0x01	; 1
     396:	40 80       	ld	r4, Z
     398:	51 80       	ldd	r5, Z+1	; 0x01
     39a:	61 2c       	mov	r6, r1
     39c:	71 2c       	mov	r7, r1
     39e:	d3 01       	movw	r26, r6
     3a0:	c2 01       	movw	r24, r4
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	aa 1f       	adc	r26, r26
     3a8:	bb 1f       	adc	r27, r27
     3aa:	9a 01       	movw	r18, r20
     3ac:	ab 01       	movw	r20, r22
     3ae:	28 1b       	sub	r18, r24
     3b0:	39 0b       	sbc	r19, r25
     3b2:	4a 0b       	sbc	r20, r26
     3b4:	5b 0b       	sbc	r21, r27
		* ((int32_t)bmp280_cal.dig_t2)) >> 11;
     3b6:	a2 81       	ldd	r26, Z+2	; 0x02
     3b8:	b3 81       	ldd	r27, Z+3	; 0x03
     3ba:	0e 94 27 09 	call	0x124e	; 0x124e <__mulshisi3>

	// The following code is based on a 32-bit integer code
	// from the BMP280 datasheet

	// compute the temperature
	var1 = ((((temp_raw >> 3) - ((int32_t)bmp280_cal.dig_t1 << 1)))
     3be:	4b 01       	movw	r8, r22
     3c0:	5c 01       	movw	r10, r24
     3c2:	07 2e       	mov	r0, r23
     3c4:	7b e0       	ldi	r23, 0x0B	; 11
     3c6:	b5 94       	asr	r11
     3c8:	a7 94       	ror	r10
     3ca:	97 94       	ror	r9
     3cc:	87 94       	ror	r8
     3ce:	7a 95       	dec	r23
     3d0:	d1 f7       	brne	.-12     	; 0x3c6 <bmp280_measure+0x13e>
     3d2:	70 2d       	mov	r23, r0
		* ((int32_t)bmp280_cal.dig_t2)) >> 11;
	var2 = (((((temp_raw >> 4) - ((int32_t)bmp280_cal.dig_t1))
     3d4:	d7 01       	movw	r26, r14
     3d6:	c6 01       	movw	r24, r12
     3d8:	68 94       	set
     3da:	13 f8       	bld	r1, 3
     3dc:	b5 95       	asr	r27
     3de:	a7 95       	ror	r26
     3e0:	97 95       	ror	r25
     3e2:	87 95       	ror	r24
     3e4:	16 94       	lsr	r1
     3e6:	d1 f7       	brne	.-12     	; 0x3dc <bmp280_measure+0x154>
		* ((temp_raw >> 4) - ((int32_t)bmp280_cal.dig_t1))) >> 12)
     3e8:	bc 01       	movw	r22, r24
     3ea:	cd 01       	movw	r24, r26
     3ec:	64 19       	sub	r22, r4
     3ee:	75 09       	sbc	r23, r5
     3f0:	86 09       	sbc	r24, r6
     3f2:	97 09       	sbc	r25, r7
     3f4:	9b 01       	movw	r18, r22
     3f6:	ac 01       	movw	r20, r24
     3f8:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__mulsi3>
     3fc:	9b 01       	movw	r18, r22
     3fe:	ac 01       	movw	r20, r24
     400:	01 2e       	mov	r0, r17
     402:	1c e0       	ldi	r17, 0x0C	; 12
     404:	55 95       	asr	r21
     406:	47 95       	ror	r20
     408:	37 95       	ror	r19
     40a:	27 95       	ror	r18
     40c:	1a 95       	dec	r17
     40e:	d1 f7       	brne	.-12     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     410:	10 2d       	mov	r17, r0
		* ((int32_t)bmp280_cal.dig_t3)) >> 14;
     412:	a4 81       	ldd	r26, Z+4	; 0x04
     414:	b5 81       	ldd	r27, Z+5	; 0x05
     416:	0e 94 27 09 	call	0x124e	; 0x124e <__mulshisi3>
	// from the BMP280 datasheet

	// compute the temperature
	var1 = ((((temp_raw >> 3) - ((int32_t)bmp280_cal.dig_t1 << 1)))
		* ((int32_t)bmp280_cal.dig_t2)) >> 11;
	var2 = (((((temp_raw >> 4) - ((int32_t)bmp280_cal.dig_t1))
     41a:	6b 01       	movw	r12, r22
     41c:	7c 01       	movw	r14, r24
     41e:	0b 2e       	mov	r0, r27
     420:	be e0       	ldi	r27, 0x0E	; 14
     422:	f5 94       	asr	r15
     424:	e7 94       	ror	r14
     426:	d7 94       	ror	r13
     428:	c7 94       	ror	r12
     42a:	ba 95       	dec	r27
     42c:	d1 f7       	brne	.-12     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     42e:	b0 2d       	mov	r27, r0
		* ((temp_raw >> 4) - ((int32_t)bmp280_cal.dig_t1))) >> 12)
		* ((int32_t)bmp280_cal.dig_t3)) >> 14;
	t_fine = var1 + var2;
     430:	c8 0c       	add	r12, r8
     432:	d9 1c       	adc	r13, r9
     434:	ea 1c       	adc	r14, r10
     436:	fb 1c       	adc	r15, r11
	_bmp280_temp = (t_fine * 5 + 128) >> 8;
     438:	d7 01       	movw	r26, r14
     43a:	c6 01       	movw	r24, r12
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	aa 1f       	adc	r26, r26
     442:	bb 1f       	adc	r27, r27
     444:	88 0f       	add	r24, r24
     446:	99 1f       	adc	r25, r25
     448:	aa 1f       	adc	r26, r26
     44a:	bb 1f       	adc	r27, r27
     44c:	8c 0d       	add	r24, r12
     44e:	9d 1d       	adc	r25, r13
     450:	ae 1d       	adc	r26, r14
     452:	bf 1d       	adc	r27, r15
     454:	80 58       	subi	r24, 0x80	; 128
     456:	9f 4f       	sbci	r25, 0xFF	; 255
     458:	af 4f       	sbci	r26, 0xFF	; 255
     45a:	bf 4f       	sbci	r27, 0xFF	; 255
     45c:	89 2f       	mov	r24, r25
     45e:	9a 2f       	mov	r25, r26
     460:	ab 2f       	mov	r26, r27
     462:	bb 27       	eor	r27, r27
     464:	a7 fd       	sbrc	r26, 7
     466:	ba 95       	dec	r27
     468:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <_bmp280_temp>
     46c:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <_bmp280_temp+0x1>
     470:	a0 93 a9 01 	sts	0x01A9, r26	; 0x8001a9 <_bmp280_temp+0x2>
     474:	b0 93 aa 01 	sts	0x01AA, r27	; 0x8001aa <_bmp280_temp+0x3>
	BMP280_DEBUG("temperature x 100", _bmp280_temp);

	// compute the pressure
	var1 = (((int32_t)t_fine) >> 1) - (int32_t)64000;
     478:	f5 94       	asr	r15
     47a:	e7 94       	ror	r14
     47c:	d7 94       	ror	r13
     47e:	c7 94       	ror	r12
     480:	3a ef       	ldi	r19, 0xFA	; 250
     482:	d3 1a       	sub	r13, r19
     484:	e1 08       	sbc	r14, r1
     486:	f1 08       	sbc	r15, r1
	var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int32_t)bmp280_cal.dig_p6);
     488:	c7 01       	movw	r24, r14
     48a:	b6 01       	movw	r22, r12
     48c:	95 95       	asr	r25
     48e:	87 95       	ror	r24
     490:	77 95       	ror	r23
     492:	67 95       	ror	r22
     494:	95 95       	asr	r25
     496:	87 95       	ror	r24
     498:	77 95       	ror	r23
     49a:	67 95       	ror	r22
     49c:	9b 01       	movw	r18, r22
     49e:	ac 01       	movw	r20, r24
     4a0:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__mulsi3>
     4a4:	4b 01       	movw	r8, r22
     4a6:	5c 01       	movw	r10, r24
     4a8:	9b 01       	movw	r18, r22
     4aa:	ac 01       	movw	r20, r24
     4ac:	01 2e       	mov	r0, r17
     4ae:	1b e0       	ldi	r17, 0x0B	; 11
     4b0:	55 95       	asr	r21
     4b2:	47 95       	ror	r20
     4b4:	37 95       	ror	r19
     4b6:	27 95       	ror	r18
     4b8:	1a 95       	dec	r17
     4ba:	d1 f7       	brne	.-12     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     4bc:	10 2d       	mov	r17, r0
     4be:	a0 89       	ldd	r26, Z+16	; 0x10
     4c0:	b1 89       	ldd	r27, Z+17	; 0x11
     4c2:	0e 94 27 09 	call	0x124e	; 0x124e <__mulshisi3>
     4c6:	2b 01       	movw	r4, r22
     4c8:	3c 01       	movw	r6, r24
	var2 = var2 + ((var1 * ((int32_t)bmp280_cal.dig_p5)) << 1);
     4ca:	a6 85       	ldd	r26, Z+14	; 0x0e
     4cc:	b7 85       	ldd	r27, Z+15	; 0x0f
     4ce:	a7 01       	movw	r20, r14
     4d0:	96 01       	movw	r18, r12
     4d2:	0e 94 27 09 	call	0x124e	; 0x124e <__mulshisi3>
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	88 0f       	add	r24, r24
     4dc:	99 1f       	adc	r25, r25
     4de:	aa 1f       	adc	r26, r26
     4e0:	bb 1f       	adc	r27, r27
     4e2:	48 0e       	add	r4, r24
     4e4:	59 1e       	adc	r5, r25
     4e6:	6a 1e       	adc	r6, r26
     4e8:	7b 1e       	adc	r7, r27
	var2 = (var2 >> 2) + (((int32_t)bmp280_cal.dig_p4) << 16);
     4ea:	75 94       	asr	r7
     4ec:	67 94       	ror	r6
     4ee:	57 94       	ror	r5
     4f0:	47 94       	ror	r4
     4f2:	75 94       	asr	r7
     4f4:	67 94       	ror	r6
     4f6:	57 94       	ror	r5
     4f8:	47 94       	ror	r4
     4fa:	84 85       	ldd	r24, Z+12	; 0x0c
     4fc:	95 85       	ldd	r25, Z+13	; 0x0d
     4fe:	09 2e       	mov	r0, r25
     500:	00 0c       	add	r0, r0
     502:	aa 0b       	sbc	r26, r26
     504:	bb 0b       	sbc	r27, r27
     506:	dc 01       	movw	r26, r24
     508:	99 27       	eor	r25, r25
     50a:	88 27       	eor	r24, r24
     50c:	48 0e       	add	r4, r24
     50e:	59 1e       	adc	r5, r25
     510:	6a 1e       	adc	r6, r26
     512:	7b 1e       	adc	r7, r27
	var1 = (((bmp280_cal.dig_p3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3)
     514:	a2 85       	ldd	r26, Z+10	; 0x0a
     516:	b3 85       	ldd	r27, Z+11	; 0x0b
     518:	a5 01       	movw	r20, r10
     51a:	94 01       	movw	r18, r8
     51c:	01 2e       	mov	r0, r17
     51e:	1d e0       	ldi	r17, 0x0D	; 13
     520:	55 95       	asr	r21
     522:	47 95       	ror	r20
     524:	37 95       	ror	r19
     526:	27 95       	ror	r18
     528:	1a 95       	dec	r17
     52a:	d1 f7       	brne	.-12     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
     52c:	10 2d       	mov	r17, r0
     52e:	0e 94 27 09 	call	0x124e	; 0x124e <__mulshisi3>
     532:	4b 01       	movw	r8, r22
     534:	5c 01       	movw	r10, r24
     536:	68 94       	set
     538:	12 f8       	bld	r1, 2
     53a:	b5 94       	asr	r11
     53c:	a7 94       	ror	r10
     53e:	97 94       	ror	r9
     540:	87 94       	ror	r8
     542:	16 94       	lsr	r1
     544:	d1 f7       	brne	.-12     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
		+ ((((int32_t)bmp280_cal.dig_p2) * var1) >> 1)) >> 18;
     546:	a0 85       	ldd	r26, Z+8	; 0x08
     548:	b1 85       	ldd	r27, Z+9	; 0x09
     54a:	a7 01       	movw	r20, r14
     54c:	96 01       	movw	r18, r12
     54e:	0e 94 27 09 	call	0x124e	; 0x124e <__mulshisi3>
     552:	dc 01       	movw	r26, r24
     554:	cb 01       	movw	r24, r22
     556:	b5 95       	asr	r27
     558:	a7 95       	ror	r26
     55a:	97 95       	ror	r25
     55c:	87 95       	ror	r24
     55e:	88 0d       	add	r24, r8
     560:	99 1d       	adc	r25, r9
     562:	aa 1d       	adc	r26, r10
     564:	bb 1d       	adc	r27, r11
	// compute the pressure
	var1 = (((int32_t)t_fine) >> 1) - (int32_t)64000;
	var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int32_t)bmp280_cal.dig_p6);
	var2 = var2 + ((var1 * ((int32_t)bmp280_cal.dig_p5)) << 1);
	var2 = (var2 >> 2) + (((int32_t)bmp280_cal.dig_p4) << 16);
	var1 = (((bmp280_cal.dig_p3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3)
     566:	07 2e       	mov	r0, r23
     568:	72 e1       	ldi	r23, 0x12	; 18
     56a:	b5 95       	asr	r27
     56c:	a7 95       	ror	r26
     56e:	97 95       	ror	r25
     570:	87 95       	ror	r24
     572:	7a 95       	dec	r23
     574:	d1 f7       	brne	.-12     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
     576:	70 2d       	mov	r23, r0
		+ ((((int32_t)bmp280_cal.dig_p2) * var1) >> 1)) >> 18;
	var1 = ((((32768 + var1)) * ((int32_t)bmp280_cal.dig_p1)) >> 15);
     578:	9c 01       	movw	r18, r24
     57a:	ad 01       	movw	r20, r26
     57c:	30 58       	subi	r19, 0x80	; 128
     57e:	4f 4f       	sbci	r20, 0xFF	; 255
     580:	5f 4f       	sbci	r21, 0xFF	; 255
     582:	a6 81       	ldd	r26, Z+6	; 0x06
     584:	b7 81       	ldd	r27, Z+7	; 0x07
     586:	0e 94 1c 09 	call	0x1238	; 0x1238 <__muluhisi3>
     58a:	6b 01       	movw	r12, r22
     58c:	7c 01       	movw	r14, r24
     58e:	0b 2e       	mov	r0, r27
     590:	bf e0       	ldi	r27, 0x0F	; 15
     592:	f5 94       	asr	r15
     594:	e7 94       	ror	r14
     596:	d7 94       	ror	r13
     598:	c7 94       	ror	r12
     59a:	ba 95       	dec	r27
     59c:	d1 f7       	brne	.-12     	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
     59e:	b0 2d       	mov	r27, r0

	if (var1 == 0) {
     5a0:	c1 14       	cp	r12, r1
     5a2:	d1 04       	cpc	r13, r1
     5a4:	e1 04       	cpc	r14, r1
     5a6:	f1 04       	cpc	r15, r1
     5a8:	49 f4       	brne	.+18     	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
		_bmp280_pres = 0;
     5aa:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <_bmp280_pres>
     5ae:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <_bmp280_pres+0x1>
     5b2:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <_bmp280_pres+0x2>
     5b6:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <_bmp280_pres+0x3>
     5ba:	b3 c0       	rjmp	.+358    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
	} else {
		_bmp280_pres = (((uint32_t)(((int32_t)1048576)-pres_raw)
			- (var2 >> 12))) * 3125;
     5bc:	03 2e       	mov	r0, r19
     5be:	3c e0       	ldi	r19, 0x0C	; 12
     5c0:	75 94       	asr	r7
     5c2:	67 94       	ror	r6
     5c4:	57 94       	ror	r5
     5c6:	47 94       	ror	r4
     5c8:	3a 95       	dec	r19
     5ca:	d1 f7       	brne	.-12     	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
     5cc:	30 2d       	mov	r19, r0
     5ce:	8f 81       	ldd	r24, Y+7	; 0x07
     5d0:	98 85       	ldd	r25, Y+8	; 0x08
     5d2:	a9 85       	ldd	r26, Y+9	; 0x09
     5d4:	ba 85       	ldd	r27, Y+10	; 0x0a
     5d6:	b0 95       	com	r27
     5d8:	a0 95       	com	r26
     5da:	90 95       	com	r25
     5dc:	81 95       	neg	r24
     5de:	9f 4f       	sbci	r25, 0xFF	; 255
     5e0:	af 4f       	sbci	r26, 0xFF	; 255
     5e2:	bf 4f       	sbci	r27, 0xFF	; 255
     5e4:	9c 01       	movw	r18, r24
     5e6:	ad 01       	movw	r20, r26
     5e8:	24 19       	sub	r18, r4
     5ea:	35 09       	sbc	r19, r5
     5ec:	46 09       	sbc	r20, r6
     5ee:	57 09       	sbc	r21, r7
     5f0:	a5 e3       	ldi	r26, 0x35	; 53
     5f2:	bc e0       	ldi	r27, 0x0C	; 12
     5f4:	0e 94 1c 09 	call	0x1238	; 0x1238 <__muluhisi3>
     5f8:	80 5b       	subi	r24, 0xB0	; 176
     5fa:	9c 43       	sbci	r25, 0x3C	; 60
		if (_bmp280_pres < 0x80000000) {
     5fc:	99 23       	and	r25, r25
     5fe:	8c f0       	brlt	.+34     	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
			_bmp280_pres = (_bmp280_pres << 1) / ((uint32_t)var1);
     600:	66 0f       	add	r22, r22
     602:	77 1f       	adc	r23, r23
     604:	88 1f       	adc	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	a7 01       	movw	r20, r14
     60a:	96 01       	movw	r18, r12
     60c:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__udivmodsi4>
     610:	20 93 ab 01 	sts	0x01AB, r18	; 0x8001ab <_bmp280_pres>
     614:	30 93 ac 01 	sts	0x01AC, r19	; 0x8001ac <_bmp280_pres+0x1>
     618:	40 93 ad 01 	sts	0x01AD, r20	; 0x8001ad <_bmp280_pres+0x2>
     61c:	50 93 ae 01 	sts	0x01AE, r21	; 0x8001ae <_bmp280_pres+0x3>
     620:	12 c0       	rjmp	.+36     	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
		} else {
			_bmp280_pres = (_bmp280_pres / (uint32_t)var1) * 2;
     622:	a7 01       	movw	r20, r14
     624:	96 01       	movw	r18, r12
     626:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__udivmodsi4>
     62a:	da 01       	movw	r26, r20
     62c:	c9 01       	movw	r24, r18
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	aa 1f       	adc	r26, r26
     634:	bb 1f       	adc	r27, r27
     636:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_bmp280_pres>
     63a:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <_bmp280_pres+0x1>
     63e:	a0 93 ad 01 	sts	0x01AD, r26	; 0x8001ad <_bmp280_pres+0x2>
     642:	b0 93 ae 01 	sts	0x01AE, r27	; 0x8001ae <_bmp280_pres+0x3>
		}
		var1 = (((int32_t)bmp280_cal.dig_p9) * ((int32_t)(((_bmp280_pres>>3) * (_bmp280_pres >> 3)) >> 13))) >> 12;
     646:	e8 e4       	ldi	r30, 0x48	; 72
     648:	f1 e0       	ldi	r31, 0x01	; 1
     64a:	a6 88       	ldd	r10, Z+22	; 0x16
     64c:	b7 88       	ldd	r11, Z+23	; 0x17
     64e:	c0 90 ab 01 	lds	r12, 0x01AB	; 0x8001ab <_bmp280_pres>
     652:	d0 90 ac 01 	lds	r13, 0x01AC	; 0x8001ac <_bmp280_pres+0x1>
     656:	e0 90 ad 01 	lds	r14, 0x01AD	; 0x8001ad <_bmp280_pres+0x2>
     65a:	f0 90 ae 01 	lds	r15, 0x01AE	; 0x8001ae <_bmp280_pres+0x3>
     65e:	c7 01       	movw	r24, r14
     660:	b6 01       	movw	r22, r12
     662:	68 94       	set
     664:	12 f8       	bld	r1, 2
     666:	96 95       	lsr	r25
     668:	87 95       	ror	r24
     66a:	77 95       	ror	r23
     66c:	67 95       	ror	r22
     66e:	16 94       	lsr	r1
     670:	d1 f7       	brne	.-12     	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
     672:	9b 01       	movw	r18, r22
     674:	ac 01       	movw	r20, r24
     676:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__mulsi3>
     67a:	9b 01       	movw	r18, r22
     67c:	ac 01       	movw	r20, r24
     67e:	01 2e       	mov	r0, r17
     680:	1d e0       	ldi	r17, 0x0D	; 13
     682:	56 95       	lsr	r21
     684:	47 95       	ror	r20
     686:	37 95       	ror	r19
     688:	27 95       	ror	r18
     68a:	1a 95       	dec	r17
     68c:	d1 f7       	brne	.-12     	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
     68e:	10 2d       	mov	r17, r0
     690:	d5 01       	movw	r26, r10
     692:	0e 94 27 09 	call	0x124e	; 0x124e <__mulshisi3>
     696:	4b 01       	movw	r8, r22
     698:	5c 01       	movw	r10, r24
     69a:	07 2e       	mov	r0, r23
     69c:	7c e0       	ldi	r23, 0x0C	; 12
     69e:	b5 94       	asr	r11
     6a0:	a7 94       	ror	r10
     6a2:	97 94       	ror	r9
     6a4:	87 94       	ror	r8
     6a6:	7a 95       	dec	r23
     6a8:	d1 f7       	brne	.-12     	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
     6aa:	70 2d       	mov	r23, r0
		var2 = (((int32_t)(_bmp280_pres >> 2)) * ((int32_t)bmp280_cal.dig_p8)) >> 13;
     6ac:	a7 01       	movw	r20, r14
     6ae:	96 01       	movw	r18, r12
     6b0:	56 95       	lsr	r21
     6b2:	47 95       	ror	r20
     6b4:	37 95       	ror	r19
     6b6:	27 95       	ror	r18
     6b8:	56 95       	lsr	r21
     6ba:	47 95       	ror	r20
     6bc:	37 95       	ror	r19
     6be:	27 95       	ror	r18
     6c0:	a4 89       	ldd	r26, Z+20	; 0x14
     6c2:	b5 89       	ldd	r27, Z+21	; 0x15
     6c4:	0e 94 27 09 	call	0x124e	; 0x124e <__mulshisi3>
     6c8:	dc 01       	movw	r26, r24
     6ca:	cb 01       	movw	r24, r22
     6cc:	07 2e       	mov	r0, r23
     6ce:	7d e0       	ldi	r23, 0x0D	; 13
     6d0:	b5 95       	asr	r27
     6d2:	a7 95       	ror	r26
     6d4:	97 95       	ror	r25
     6d6:	87 95       	ror	r24
     6d8:	7a 95       	dec	r23
     6da:	d1 f7       	brne	.-12     	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
     6dc:	70 2d       	mov	r23, r0
		_bmp280_pres = (uint32_t)((int32_t)_bmp280_pres + ((var1 + var2 + bmp280_cal.dig_p7) >> 4));
     6de:	88 0d       	add	r24, r8
     6e0:	99 1d       	adc	r25, r9
     6e2:	aa 1d       	adc	r26, r10
     6e4:	bb 1d       	adc	r27, r11
     6e6:	82 88       	ldd	r8, Z+18	; 0x12
     6e8:	93 88       	ldd	r9, Z+19	; 0x13
     6ea:	09 2c       	mov	r0, r9
     6ec:	00 0c       	add	r0, r0
     6ee:	aa 08       	sbc	r10, r10
     6f0:	bb 08       	sbc	r11, r11
     6f2:	88 0d       	add	r24, r8
     6f4:	99 1d       	adc	r25, r9
     6f6:	aa 1d       	adc	r26, r10
     6f8:	bb 1d       	adc	r27, r11
     6fa:	68 94       	set
     6fc:	13 f8       	bld	r1, 3
     6fe:	b5 95       	asr	r27
     700:	a7 95       	ror	r26
     702:	97 95       	ror	r25
     704:	87 95       	ror	r24
     706:	16 94       	lsr	r1
     708:	d1 f7       	brne	.-12     	; 0x6fe <__EEPROM_REGION_LENGTH__+0x2fe>
     70a:	8c 0d       	add	r24, r12
     70c:	9d 1d       	adc	r25, r13
     70e:	ae 1d       	adc	r26, r14
     710:	bf 1d       	adc	r27, r15
     712:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_bmp280_pres>
     716:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <_bmp280_pres+0x1>
     71a:	a0 93 ad 01 	sts	0x01AD, r26	; 0x8001ad <_bmp280_pres+0x2>
     71e:	b0 93 ae 01 	sts	0x01AE, r27	; 0x8001ae <_bmp280_pres+0x3>
	}

	BMP280_DEBUG("pressure x 100", _bmp280_pres);
}
     722:	2a 96       	adiw	r28, 0x0a	; 10
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	de bf       	out	0x3e, r29	; 62
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	cd bf       	out	0x3d, r28	; 61
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	bf 90       	pop	r11
     73c:	af 90       	pop	r10
     73e:	9f 90       	pop	r9
     740:	8f 90       	pop	r8
     742:	7f 90       	pop	r7
     744:	6f 90       	pop	r6
     746:	5f 90       	pop	r5
     748:	4f 90       	pop	r4
     74a:	08 95       	ret

0000074c <bmp280_getaltitude>:

double bmp280_getaltitude() {
	double alt;
	alt = (1 - pow(_bmp280_pres/(double)101325, 0.1903)) / 0.0000225577;
     74c:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <_bmp280_pres>
     750:	70 91 ac 01 	lds	r23, 0x01AC	; 0x8001ac <_bmp280_pres+0x1>
     754:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_bmp280_pres+0x2>
     758:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <_bmp280_pres+0x3>
     75c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__floatunsisf>
     760:	20 e8       	ldi	r18, 0x80	; 128
     762:	36 ee       	ldi	r19, 0xE6	; 230
     764:	45 ec       	ldi	r20, 0xC5	; 197
     766:	57 e4       	ldi	r21, 0x47	; 71
     768:	0e 94 c2 05 	call	0xb84	; 0xb84 <__divsf3>
     76c:	21 e0       	ldi	r18, 0x01	; 1
     76e:	3e ed       	ldi	r19, 0xDE	; 222
     770:	42 e4       	ldi	r20, 0x42	; 66
     772:	5e e3       	ldi	r21, 0x3E	; 62
     774:	0e 94 65 07 	call	0xeca	; 0xeca <pow>
     778:	9b 01       	movw	r18, r22
     77a:	ac 01       	movw	r20, r24
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	80 e8       	ldi	r24, 0x80	; 128
     782:	9f e3       	ldi	r25, 0x3F	; 63
     784:	0e 94 55 05 	call	0xaaa	; 0xaaa <__subsf3>
     788:	2b e4       	ldi	r18, 0x4B	; 75
     78a:	3a e3       	ldi	r19, 0x3A	; 58
     78c:	4d eb       	ldi	r20, 0xBD	; 189
     78e:	57 e3       	ldi	r21, 0x37	; 55
     790:	0e 94 c2 05 	call	0xb84	; 0xb84 <__divsf3>

	BMP280_DEBUG("alt x 100", (long)(alt * 100));

	return alt;
}
     794:	08 95       	ret

00000796 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     796:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     79a:	88 e4       	ldi	r24, 0x48	; 72
     79c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     7a0:	08 95       	ret

000007a2 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     7a2:	94 ea       	ldi	r25, 0xA4	; 164
     7a4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     7a8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7ac:	99 23       	and	r25, r25
     7ae:	e4 f7       	brge	.-8      	; 0x7a8 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     7b0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     7b4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     7b6:	98 30       	cpi	r25, 0x08	; 8
     7b8:	11 f0       	breq	.+4      	; 0x7be <i2c_start+0x1c>
     7ba:	90 31       	cpi	r25, 0x10	; 16
     7bc:	91 f4       	brne	.+36     	; 0x7e2 <i2c_start+0x40>

	// send device address
	TWDR = address;
     7be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     7c2:	84 e8       	ldi	r24, 0x84	; 132
     7c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     7c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7cc:	88 23       	and	r24, r24
     7ce:	e4 f7       	brge	.-8      	; 0x7c8 <i2c_start+0x26>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     7d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     7d4:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     7d6:	88 31       	cpi	r24, 0x18	; 24
     7d8:	31 f0       	breq	.+12     	; 0x7e6 <i2c_start+0x44>
     7da:	80 34       	cpi	r24, 0x40	; 64
     7dc:	31 f4       	brne	.+12     	; 0x7ea <i2c_start+0x48>

	return 0;
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     7ea:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     7ec:	08 95       	ret

000007ee <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     7ee:	94 ea       	ldi	r25, 0xA4	; 164
     7f0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     7f4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7f8:	99 23       	and	r25, r25
     7fa:	e4 f7       	brge	.-8      	; 0x7f4 <i2c_start_wait+0x6>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     7fc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     800:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     802:	98 30       	cpi	r25, 0x08	; 8
     804:	11 f0       	breq	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     806:	90 31       	cpi	r25, 0x10	; 16
     808:	91 f7       	brne	.-28     	; 0x7ee <i2c_start_wait>
    
    	// send device address
    	TWDR = address;
     80a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
     80e:	94 e8       	ldi	r25, 0x84	; 132
     810:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     814:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     818:	99 23       	and	r25, r25
     81a:	e4 f7       	brge	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     81c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     820:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     822:	90 32       	cpi	r25, 0x20	; 32
     824:	11 f0       	breq	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     826:	98 35       	cpi	r25, 0x58	; 88
     828:	41 f4       	brne	.+16     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     82a:	94 e9       	ldi	r25, 0x94	; 148
     82c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     830:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     834:	94 fd       	sbrc	r25, 4
     836:	fc cf       	rjmp	.-8      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     838:	da cf       	rjmp	.-76     	; 0x7ee <i2c_start_wait>
     83a:	08 95       	ret

0000083c <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     83c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <i2c_start>

}/* i2c_rep_start */
     840:	08 95       	ret

00000842 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     842:	84 e9       	ldi	r24, 0x94	; 148
     844:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     848:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     84c:	84 fd       	sbrc	r24, 4
     84e:	fc cf       	rjmp	.-8      	; 0x848 <i2c_stop+0x6>

}/* i2c_stop */
     850:	08 95       	ret

00000852 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     852:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     856:	84 e8       	ldi	r24, 0x84	; 132
     858:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     85c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     860:	88 23       	and	r24, r24
     862:	e4 f7       	brge	.-8      	; 0x85c <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     864:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     868:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     86a:	88 32       	cpi	r24, 0x28	; 40
     86c:	11 f0       	breq	.+4      	; 0x872 <i2c_write+0x20>
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	08 95       	ret
	return 0;
     872:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
     874:	08 95       	ret

00000876 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     876:	84 ec       	ldi	r24, 0xC4	; 196
     878:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
     87c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     880:	88 23       	and	r24, r24
     882:	e4 f7       	brge	.-8      	; 0x87c <i2c_readAck+0x6>

    return TWDR;
     884:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
     888:	08 95       	ret

0000088a <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     88a:	84 e8       	ldi	r24, 0x84	; 132
     88c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
     890:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     894:	88 23       	and	r24, r24
     896:	e4 f7       	brge	.-8      	; 0x890 <i2c_readNak+0x6>
	
    return TWDR;
     898:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
     89c:	08 95       	ret

0000089e <__vector_18>:
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
     89e:	1f 92       	push	r1
     8a0:	0f 92       	push	r0
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	0f 92       	push	r0
     8a6:	11 24       	eor	r1, r1
     8a8:	2f 93       	push	r18
     8aa:	8f 93       	push	r24
     8ac:	9f 93       	push	r25
     8ae:	ef 93       	push	r30
     8b0:	ff 93       	push	r31
     8b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     8b6:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     8ba:	8c 71       	andi	r24, 0x1C	; 28
     8bc:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <UART_RxHead>
     8c0:	ef 5f       	subi	r30, 0xFF	; 255
     8c2:	ef 71       	andi	r30, 0x1F	; 31
     8c4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <UART_RxTail>
     8c8:	e9 17       	cp	r30, r25
     8ca:	39 f0       	breq	.+14     	; 0x8da <__vector_18+0x3c>
     8cc:	e0 93 64 01 	sts	0x0164, r30	; 0x800164 <UART_RxHead>
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	e9 59       	subi	r30, 0x99	; 153
     8d4:	fe 4f       	sbci	r31, 0xFE	; 254
     8d6:	20 83       	st	Z, r18
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__vector_18+0x3e>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <UART_LastRxError>
     8e0:	89 2b       	or	r24, r25
     8e2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <UART_LastRxError>
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	2f 91       	pop	r18
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	1f 90       	pop	r1
     8f8:	18 95       	reti

000008fa <__vector_19>:
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	ef 93       	push	r30
     90a:	ff 93       	push	r31
     90c:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <UART_TxHead>
     910:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <UART_TxTail>
     914:	98 17       	cp	r25, r24
     916:	69 f0       	breq	.+26     	; 0x932 <__stack+0x33>
     918:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <UART_TxTail>
     91c:	ef 5f       	subi	r30, 0xFF	; 255
     91e:	ef 71       	andi	r30, 0x1F	; 31
     920:	e0 93 65 01 	sts	0x0165, r30	; 0x800165 <UART_TxTail>
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	e9 57       	subi	r30, 0x79	; 121
     928:	fe 4f       	sbci	r31, 0xFE	; 254
     92a:	80 81       	ld	r24, Z
     92c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     930:	05 c0       	rjmp	.+10     	; 0x93c <__stack+0x3d>
     932:	e1 ec       	ldi	r30, 0xC1	; 193
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	80 81       	ld	r24, Z
     938:	8f 7d       	andi	r24, 0xDF	; 223
     93a:	80 83       	st	Z, r24
     93c:	ff 91       	pop	r31
     93e:	ef 91       	pop	r30
     940:	9f 91       	pop	r25
     942:	8f 91       	pop	r24
     944:	0f 90       	pop	r0
     946:	0f be       	out	0x3f, r0	; 63
     948:	0f 90       	pop	r0
     94a:	1f 90       	pop	r1
     94c:	18 95       	reti

0000094e <uart_init>:
     94e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <UART_TxHead>
     952:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <UART_TxTail>
     956:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <UART_RxHead>
     95a:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <UART_RxTail>
     95e:	28 2f       	mov	r18, r24
     960:	39 2f       	mov	r19, r25
     962:	33 23       	and	r19, r19
     964:	1c f4       	brge	.+6      	; 0x96c <uart_init+0x1e>
     966:	22 e0       	ldi	r18, 0x02	; 2
     968:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     96c:	90 78       	andi	r25, 0x80	; 128
     96e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     972:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     976:	88 e9       	ldi	r24, 0x98	; 152
     978:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     97c:	86 e0       	ldi	r24, 0x06	; 6
     97e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     982:	08 95       	ret

00000984 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     984:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <UART_TxHead>
     988:	2f 5f       	subi	r18, 0xFF	; 255
     98a:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     98c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <UART_TxTail>
     990:	29 17       	cp	r18, r25
     992:	e1 f3       	breq	.-8      	; 0x98c <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     994:	e2 2f       	mov	r30, r18
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	e9 57       	subi	r30, 0x79	; 121
     99a:	fe 4f       	sbci	r31, 0xFE	; 254
     99c:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     99e:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     9a2:	e1 ec       	ldi	r30, 0xC1	; 193
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	80 62       	ori	r24, 0x20	; 32
     9aa:	80 83       	st	Z, r24
     9ac:	08 95       	ret

000009ae <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	ec 01       	movw	r28, r24
    while (*s) 
     9b4:	03 c0       	rjmp	.+6      	; 0x9bc <uart_puts+0xe>
      uart_putc(*s++);
     9b6:	21 96       	adiw	r28, 0x01	; 1
     9b8:	0e 94 c2 04 	call	0x984	; 0x984 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     9bc:	88 81       	ld	r24, Y
     9be:	81 11       	cpse	r24, r1
     9c0:	fa cf       	rjmp	.-12     	; 0x9b6 <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	08 95       	ret

000009c8 <uart_print>:
#include <bmp280.h>

// this function can also be used as BMP280_DEBUG(name, val) in bmp280.c.
#define UART_BUFLEN 10
void uart_print(char *name, long val)
{
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	2a 97       	sbiw	r28, 0x0a	; 10
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	cd bf       	out	0x3d, r28	; 61
     9e4:	6a 01       	movw	r12, r20
     9e6:	7b 01       	movw	r14, r22
	char debug_buffer[UART_BUFLEN];

	uart_puts(name);
     9e8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <uart_puts>
	uart_puts(" = ");
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	0e 94 d7 04 	call	0x9ae	; 0x9ae <uart_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     9f4:	2a e0       	ldi	r18, 0x0A	; 10
     9f6:	ae 01       	movw	r20, r28
     9f8:	4f 5f       	subi	r20, 0xFF	; 255
     9fa:	5f 4f       	sbci	r21, 0xFF	; 255
     9fc:	c7 01       	movw	r24, r14
     9fe:	b6 01       	movw	r22, r12
     a00:	0e 94 3e 09 	call	0x127c	; 0x127c <__ltoa_ncheck>

	ltoa((val), debug_buffer, UART_BUFLEN);
	uart_puts(debug_buffer);
     a04:	ce 01       	movw	r24, r28
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	0e 94 d7 04 	call	0x9ae	; 0x9ae <uart_puts>
	uart_puts("\n");
     a0c:	84 e0       	ldi	r24, 0x04	; 4
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 d7 04 	call	0x9ae	; 0x9ae <uart_puts>
}
     a14:	2a 96       	adiw	r28, 0x0a	; 10
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	cd bf       	out	0x3d, r28	; 61
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	cf 90       	pop	r12
     a2c:	08 95       	ret

00000a2e <main>:

int main(void) {
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU));
     a2e:	87 e6       	ldi	r24, 0x67	; 103
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 a7 04 	call	0x94e	; 0x94e <uart_init>
//	uart_puts("start\n ");
	i2c_init(); //not needed - called from bmp280_init()
     a36:	0e 94 cb 03 	call	0x796	; 0x796 <i2c_init>
	bmp280_init();
     a3a:	0e 94 1b 01 	call	0x236	; 0x236 <bmp280_init>
	// enable IRQs
	sei();
     a3e:	78 94       	sei
	uart_print("status", bmp280_get_status());
     a40:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <bmp280_get_status>
     a44:	48 2f       	mov	r20, r24
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	86 e0       	ldi	r24, 0x06	; 6
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <uart_print>
	bmp280_measure();
     a54:	0e 94 44 01 	call	0x288	; 0x288 <bmp280_measure>
	uart_print(" temperature x 100 ", bmp280_gettemperature());
     a58:	40 91 a7 01 	lds	r20, 0x01A7	; 0x8001a7 <_bmp280_temp>
     a5c:	50 91 a8 01 	lds	r21, 0x01A8	; 0x8001a8 <_bmp280_temp+0x1>
     a60:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <_bmp280_temp+0x2>
     a64:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <_bmp280_temp+0x3>
     a68:	8d e0       	ldi	r24, 0x0D	; 13
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <uart_print>
	uart_print(" pressure x 100   ", bmp280_getpressure());
     a70:	40 91 ab 01 	lds	r20, 0x01AB	; 0x8001ab <_bmp280_pres>
     a74:	50 91 ac 01 	lds	r21, 0x01AC	; 0x8001ac <_bmp280_pres+0x1>
     a78:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <_bmp280_pres+0x2>
     a7c:	70 91 ae 01 	lds	r23, 0x01AE	; 0x8001ae <_bmp280_pres+0x3>
     a80:	81 e2       	ldi	r24, 0x21	; 33
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <uart_print>
	uart_print(" altitude x 100   ", 100*bmp280_getaltitude());
     a88:	0e 94 a6 03 	call	0x74c	; 0x74c <bmp280_getaltitude>
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	48 ec       	ldi	r20, 0xC8	; 200
     a92:	52 e4       	ldi	r21, 0x42	; 66
     a94:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__mulsf3>
     a98:	0e 94 34 06 	call	0xc68	; 0xc68 <__fixsfsi>
     a9c:	ab 01       	movw	r20, r22
     a9e:	bc 01       	movw	r22, r24
     aa0:	84 e3       	ldi	r24, 0x34	; 52
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <uart_print>
     aa8:	ff cf       	rjmp	.-2      	; 0xaa8 <main+0x7a>

00000aaa <__subsf3>:
     aaa:	50 58       	subi	r21, 0x80	; 128

00000aac <__addsf3>:
     aac:	bb 27       	eor	r27, r27
     aae:	aa 27       	eor	r26, r26
     ab0:	0e 94 6d 05 	call	0xada	; 0xada <__addsf3x>
     ab4:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__fp_round>
     ab8:	0e 94 b0 06 	call	0xd60	; 0xd60 <__fp_pscA>
     abc:	38 f0       	brcs	.+14     	; 0xacc <__addsf3+0x20>
     abe:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__fp_pscB>
     ac2:	20 f0       	brcs	.+8      	; 0xacc <__addsf3+0x20>
     ac4:	39 f4       	brne	.+14     	; 0xad4 <__addsf3+0x28>
     ac6:	9f 3f       	cpi	r25, 0xFF	; 255
     ac8:	19 f4       	brne	.+6      	; 0xad0 <__addsf3+0x24>
     aca:	26 f4       	brtc	.+8      	; 0xad4 <__addsf3+0x28>
     acc:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_nan>
     ad0:	0e f4       	brtc	.+2      	; 0xad4 <__addsf3+0x28>
     ad2:	e0 95       	com	r30
     ad4:	e7 fb       	bst	r30, 7
     ad6:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_inf>

00000ada <__addsf3x>:
     ada:	e9 2f       	mov	r30, r25
     adc:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_split3>
     ae0:	58 f3       	brcs	.-42     	; 0xab8 <__addsf3+0xc>
     ae2:	ba 17       	cp	r27, r26
     ae4:	62 07       	cpc	r22, r18
     ae6:	73 07       	cpc	r23, r19
     ae8:	84 07       	cpc	r24, r20
     aea:	95 07       	cpc	r25, r21
     aec:	20 f0       	brcs	.+8      	; 0xaf6 <__addsf3x+0x1c>
     aee:	79 f4       	brne	.+30     	; 0xb0e <__addsf3x+0x34>
     af0:	a6 f5       	brtc	.+104    	; 0xb5a <__addsf3x+0x80>
     af2:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_zero>
     af6:	0e f4       	brtc	.+2      	; 0xafa <__addsf3x+0x20>
     af8:	e0 95       	com	r30
     afa:	0b 2e       	mov	r0, r27
     afc:	ba 2f       	mov	r27, r26
     afe:	a0 2d       	mov	r26, r0
     b00:	0b 01       	movw	r0, r22
     b02:	b9 01       	movw	r22, r18
     b04:	90 01       	movw	r18, r0
     b06:	0c 01       	movw	r0, r24
     b08:	ca 01       	movw	r24, r20
     b0a:	a0 01       	movw	r20, r0
     b0c:	11 24       	eor	r1, r1
     b0e:	ff 27       	eor	r31, r31
     b10:	59 1b       	sub	r21, r25
     b12:	99 f0       	breq	.+38     	; 0xb3a <__addsf3x+0x60>
     b14:	59 3f       	cpi	r21, 0xF9	; 249
     b16:	50 f4       	brcc	.+20     	; 0xb2c <__addsf3x+0x52>
     b18:	50 3e       	cpi	r21, 0xE0	; 224
     b1a:	68 f1       	brcs	.+90     	; 0xb76 <__addsf3x+0x9c>
     b1c:	1a 16       	cp	r1, r26
     b1e:	f0 40       	sbci	r31, 0x00	; 0
     b20:	a2 2f       	mov	r26, r18
     b22:	23 2f       	mov	r18, r19
     b24:	34 2f       	mov	r19, r20
     b26:	44 27       	eor	r20, r20
     b28:	58 5f       	subi	r21, 0xF8	; 248
     b2a:	f3 cf       	rjmp	.-26     	; 0xb12 <__addsf3x+0x38>
     b2c:	46 95       	lsr	r20
     b2e:	37 95       	ror	r19
     b30:	27 95       	ror	r18
     b32:	a7 95       	ror	r26
     b34:	f0 40       	sbci	r31, 0x00	; 0
     b36:	53 95       	inc	r21
     b38:	c9 f7       	brne	.-14     	; 0xb2c <__addsf3x+0x52>
     b3a:	7e f4       	brtc	.+30     	; 0xb5a <__addsf3x+0x80>
     b3c:	1f 16       	cp	r1, r31
     b3e:	ba 0b       	sbc	r27, r26
     b40:	62 0b       	sbc	r22, r18
     b42:	73 0b       	sbc	r23, r19
     b44:	84 0b       	sbc	r24, r20
     b46:	ba f0       	brmi	.+46     	; 0xb76 <__addsf3x+0x9c>
     b48:	91 50       	subi	r25, 0x01	; 1
     b4a:	a1 f0       	breq	.+40     	; 0xb74 <__addsf3x+0x9a>
     b4c:	ff 0f       	add	r31, r31
     b4e:	bb 1f       	adc	r27, r27
     b50:	66 1f       	adc	r22, r22
     b52:	77 1f       	adc	r23, r23
     b54:	88 1f       	adc	r24, r24
     b56:	c2 f7       	brpl	.-16     	; 0xb48 <__addsf3x+0x6e>
     b58:	0e c0       	rjmp	.+28     	; 0xb76 <__addsf3x+0x9c>
     b5a:	ba 0f       	add	r27, r26
     b5c:	62 1f       	adc	r22, r18
     b5e:	73 1f       	adc	r23, r19
     b60:	84 1f       	adc	r24, r20
     b62:	48 f4       	brcc	.+18     	; 0xb76 <__addsf3x+0x9c>
     b64:	87 95       	ror	r24
     b66:	77 95       	ror	r23
     b68:	67 95       	ror	r22
     b6a:	b7 95       	ror	r27
     b6c:	f7 95       	ror	r31
     b6e:	9e 3f       	cpi	r25, 0xFE	; 254
     b70:	08 f0       	brcs	.+2      	; 0xb74 <__addsf3x+0x9a>
     b72:	b0 cf       	rjmp	.-160    	; 0xad4 <__addsf3+0x28>
     b74:	93 95       	inc	r25
     b76:	88 0f       	add	r24, r24
     b78:	08 f0       	brcs	.+2      	; 0xb7c <__addsf3x+0xa2>
     b7a:	99 27       	eor	r25, r25
     b7c:	ee 0f       	add	r30, r30
     b7e:	97 95       	ror	r25
     b80:	87 95       	ror	r24
     b82:	08 95       	ret

00000b84 <__divsf3>:
     b84:	0e 94 d6 05 	call	0xbac	; 0xbac <__divsf3x>
     b88:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__fp_round>
     b8c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__fp_pscB>
     b90:	58 f0       	brcs	.+22     	; 0xba8 <__divsf3+0x24>
     b92:	0e 94 b0 06 	call	0xd60	; 0xd60 <__fp_pscA>
     b96:	40 f0       	brcs	.+16     	; 0xba8 <__divsf3+0x24>
     b98:	29 f4       	brne	.+10     	; 0xba4 <__divsf3+0x20>
     b9a:	5f 3f       	cpi	r21, 0xFF	; 255
     b9c:	29 f0       	breq	.+10     	; 0xba8 <__divsf3+0x24>
     b9e:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_inf>
     ba2:	51 11       	cpse	r21, r1
     ba4:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_szero>
     ba8:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_nan>

00000bac <__divsf3x>:
     bac:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_split3>
     bb0:	68 f3       	brcs	.-38     	; 0xb8c <__divsf3+0x8>

00000bb2 <__divsf3_pse>:
     bb2:	99 23       	and	r25, r25
     bb4:	b1 f3       	breq	.-20     	; 0xba2 <__divsf3+0x1e>
     bb6:	55 23       	and	r21, r21
     bb8:	91 f3       	breq	.-28     	; 0xb9e <__divsf3+0x1a>
     bba:	95 1b       	sub	r25, r21
     bbc:	55 0b       	sbc	r21, r21
     bbe:	bb 27       	eor	r27, r27
     bc0:	aa 27       	eor	r26, r26
     bc2:	62 17       	cp	r22, r18
     bc4:	73 07       	cpc	r23, r19
     bc6:	84 07       	cpc	r24, r20
     bc8:	38 f0       	brcs	.+14     	; 0xbd8 <__divsf3_pse+0x26>
     bca:	9f 5f       	subi	r25, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	22 0f       	add	r18, r18
     bd0:	33 1f       	adc	r19, r19
     bd2:	44 1f       	adc	r20, r20
     bd4:	aa 1f       	adc	r26, r26
     bd6:	a9 f3       	breq	.-22     	; 0xbc2 <__divsf3_pse+0x10>
     bd8:	35 d0       	rcall	.+106    	; 0xc44 <__divsf3_pse+0x92>
     bda:	0e 2e       	mov	r0, r30
     bdc:	3a f0       	brmi	.+14     	; 0xbec <__divsf3_pse+0x3a>
     bde:	e0 e8       	ldi	r30, 0x80	; 128
     be0:	32 d0       	rcall	.+100    	; 0xc46 <__divsf3_pse+0x94>
     be2:	91 50       	subi	r25, 0x01	; 1
     be4:	50 40       	sbci	r21, 0x00	; 0
     be6:	e6 95       	lsr	r30
     be8:	00 1c       	adc	r0, r0
     bea:	ca f7       	brpl	.-14     	; 0xbde <__divsf3_pse+0x2c>
     bec:	2b d0       	rcall	.+86     	; 0xc44 <__divsf3_pse+0x92>
     bee:	fe 2f       	mov	r31, r30
     bf0:	29 d0       	rcall	.+82     	; 0xc44 <__divsf3_pse+0x92>
     bf2:	66 0f       	add	r22, r22
     bf4:	77 1f       	adc	r23, r23
     bf6:	88 1f       	adc	r24, r24
     bf8:	bb 1f       	adc	r27, r27
     bfa:	26 17       	cp	r18, r22
     bfc:	37 07       	cpc	r19, r23
     bfe:	48 07       	cpc	r20, r24
     c00:	ab 07       	cpc	r26, r27
     c02:	b0 e8       	ldi	r27, 0x80	; 128
     c04:	09 f0       	breq	.+2      	; 0xc08 <__divsf3_pse+0x56>
     c06:	bb 0b       	sbc	r27, r27
     c08:	80 2d       	mov	r24, r0
     c0a:	bf 01       	movw	r22, r30
     c0c:	ff 27       	eor	r31, r31
     c0e:	93 58       	subi	r25, 0x83	; 131
     c10:	5f 4f       	sbci	r21, 0xFF	; 255
     c12:	3a f0       	brmi	.+14     	; 0xc22 <__divsf3_pse+0x70>
     c14:	9e 3f       	cpi	r25, 0xFE	; 254
     c16:	51 05       	cpc	r21, r1
     c18:	78 f0       	brcs	.+30     	; 0xc38 <__divsf3_pse+0x86>
     c1a:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_inf>
     c1e:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_szero>
     c22:	5f 3f       	cpi	r21, 0xFF	; 255
     c24:	e4 f3       	brlt	.-8      	; 0xc1e <__divsf3_pse+0x6c>
     c26:	98 3e       	cpi	r25, 0xE8	; 232
     c28:	d4 f3       	brlt	.-12     	; 0xc1e <__divsf3_pse+0x6c>
     c2a:	86 95       	lsr	r24
     c2c:	77 95       	ror	r23
     c2e:	67 95       	ror	r22
     c30:	b7 95       	ror	r27
     c32:	f7 95       	ror	r31
     c34:	9f 5f       	subi	r25, 0xFF	; 255
     c36:	c9 f7       	brne	.-14     	; 0xc2a <__divsf3_pse+0x78>
     c38:	88 0f       	add	r24, r24
     c3a:	91 1d       	adc	r25, r1
     c3c:	96 95       	lsr	r25
     c3e:	87 95       	ror	r24
     c40:	97 f9       	bld	r25, 7
     c42:	08 95       	ret
     c44:	e1 e0       	ldi	r30, 0x01	; 1
     c46:	66 0f       	add	r22, r22
     c48:	77 1f       	adc	r23, r23
     c4a:	88 1f       	adc	r24, r24
     c4c:	bb 1f       	adc	r27, r27
     c4e:	62 17       	cp	r22, r18
     c50:	73 07       	cpc	r23, r19
     c52:	84 07       	cpc	r24, r20
     c54:	ba 07       	cpc	r27, r26
     c56:	20 f0       	brcs	.+8      	; 0xc60 <__divsf3_pse+0xae>
     c58:	62 1b       	sub	r22, r18
     c5a:	73 0b       	sbc	r23, r19
     c5c:	84 0b       	sbc	r24, r20
     c5e:	ba 0b       	sbc	r27, r26
     c60:	ee 1f       	adc	r30, r30
     c62:	88 f7       	brcc	.-30     	; 0xc46 <__divsf3_pse+0x94>
     c64:	e0 95       	com	r30
     c66:	08 95       	ret

00000c68 <__fixsfsi>:
     c68:	0e 94 3b 06 	call	0xc76	; 0xc76 <__fixunssfsi>
     c6c:	68 94       	set
     c6e:	b1 11       	cpse	r27, r1
     c70:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_szero>
     c74:	08 95       	ret

00000c76 <__fixunssfsi>:
     c76:	0e 94 d7 06 	call	0xdae	; 0xdae <__fp_splitA>
     c7a:	88 f0       	brcs	.+34     	; 0xc9e <__fixunssfsi+0x28>
     c7c:	9f 57       	subi	r25, 0x7F	; 127
     c7e:	98 f0       	brcs	.+38     	; 0xca6 <__fixunssfsi+0x30>
     c80:	b9 2f       	mov	r27, r25
     c82:	99 27       	eor	r25, r25
     c84:	b7 51       	subi	r27, 0x17	; 23
     c86:	b0 f0       	brcs	.+44     	; 0xcb4 <__fixunssfsi+0x3e>
     c88:	e1 f0       	breq	.+56     	; 0xcc2 <__fixunssfsi+0x4c>
     c8a:	66 0f       	add	r22, r22
     c8c:	77 1f       	adc	r23, r23
     c8e:	88 1f       	adc	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	1a f0       	brmi	.+6      	; 0xc9a <__fixunssfsi+0x24>
     c94:	ba 95       	dec	r27
     c96:	c9 f7       	brne	.-14     	; 0xc8a <__fixunssfsi+0x14>
     c98:	14 c0       	rjmp	.+40     	; 0xcc2 <__fixunssfsi+0x4c>
     c9a:	b1 30       	cpi	r27, 0x01	; 1
     c9c:	91 f0       	breq	.+36     	; 0xcc2 <__fixunssfsi+0x4c>
     c9e:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_zero>
     ca2:	b1 e0       	ldi	r27, 0x01	; 1
     ca4:	08 95       	ret
     ca6:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_zero>
     caa:	67 2f       	mov	r22, r23
     cac:	78 2f       	mov	r23, r24
     cae:	88 27       	eor	r24, r24
     cb0:	b8 5f       	subi	r27, 0xF8	; 248
     cb2:	39 f0       	breq	.+14     	; 0xcc2 <__fixunssfsi+0x4c>
     cb4:	b9 3f       	cpi	r27, 0xF9	; 249
     cb6:	cc f3       	brlt	.-14     	; 0xcaa <__fixunssfsi+0x34>
     cb8:	86 95       	lsr	r24
     cba:	77 95       	ror	r23
     cbc:	67 95       	ror	r22
     cbe:	b3 95       	inc	r27
     cc0:	d9 f7       	brne	.-10     	; 0xcb8 <__fixunssfsi+0x42>
     cc2:	3e f4       	brtc	.+14     	; 0xcd2 <__fixunssfsi+0x5c>
     cc4:	90 95       	com	r25
     cc6:	80 95       	com	r24
     cc8:	70 95       	com	r23
     cca:	61 95       	neg	r22
     ccc:	7f 4f       	sbci	r23, 0xFF	; 255
     cce:	8f 4f       	sbci	r24, 0xFF	; 255
     cd0:	9f 4f       	sbci	r25, 0xFF	; 255
     cd2:	08 95       	ret

00000cd4 <__floatunsisf>:
     cd4:	e8 94       	clt
     cd6:	09 c0       	rjmp	.+18     	; 0xcea <__floatsisf+0x12>

00000cd8 <__floatsisf>:
     cd8:	97 fb       	bst	r25, 7
     cda:	3e f4       	brtc	.+14     	; 0xcea <__floatsisf+0x12>
     cdc:	90 95       	com	r25
     cde:	80 95       	com	r24
     ce0:	70 95       	com	r23
     ce2:	61 95       	neg	r22
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	8f 4f       	sbci	r24, 0xFF	; 255
     ce8:	9f 4f       	sbci	r25, 0xFF	; 255
     cea:	99 23       	and	r25, r25
     cec:	a9 f0       	breq	.+42     	; 0xd18 <__floatsisf+0x40>
     cee:	f9 2f       	mov	r31, r25
     cf0:	96 e9       	ldi	r25, 0x96	; 150
     cf2:	bb 27       	eor	r27, r27
     cf4:	93 95       	inc	r25
     cf6:	f6 95       	lsr	r31
     cf8:	87 95       	ror	r24
     cfa:	77 95       	ror	r23
     cfc:	67 95       	ror	r22
     cfe:	b7 95       	ror	r27
     d00:	f1 11       	cpse	r31, r1
     d02:	f8 cf       	rjmp	.-16     	; 0xcf4 <__floatsisf+0x1c>
     d04:	fa f4       	brpl	.+62     	; 0xd44 <__floatsisf+0x6c>
     d06:	bb 0f       	add	r27, r27
     d08:	11 f4       	brne	.+4      	; 0xd0e <__floatsisf+0x36>
     d0a:	60 ff       	sbrs	r22, 0
     d0c:	1b c0       	rjmp	.+54     	; 0xd44 <__floatsisf+0x6c>
     d0e:	6f 5f       	subi	r22, 0xFF	; 255
     d10:	7f 4f       	sbci	r23, 0xFF	; 255
     d12:	8f 4f       	sbci	r24, 0xFF	; 255
     d14:	9f 4f       	sbci	r25, 0xFF	; 255
     d16:	16 c0       	rjmp	.+44     	; 0xd44 <__floatsisf+0x6c>
     d18:	88 23       	and	r24, r24
     d1a:	11 f0       	breq	.+4      	; 0xd20 <__floatsisf+0x48>
     d1c:	96 e9       	ldi	r25, 0x96	; 150
     d1e:	11 c0       	rjmp	.+34     	; 0xd42 <__floatsisf+0x6a>
     d20:	77 23       	and	r23, r23
     d22:	21 f0       	breq	.+8      	; 0xd2c <__floatsisf+0x54>
     d24:	9e e8       	ldi	r25, 0x8E	; 142
     d26:	87 2f       	mov	r24, r23
     d28:	76 2f       	mov	r23, r22
     d2a:	05 c0       	rjmp	.+10     	; 0xd36 <__floatsisf+0x5e>
     d2c:	66 23       	and	r22, r22
     d2e:	71 f0       	breq	.+28     	; 0xd4c <__floatsisf+0x74>
     d30:	96 e8       	ldi	r25, 0x86	; 134
     d32:	86 2f       	mov	r24, r22
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	2a f0       	brmi	.+10     	; 0xd44 <__floatsisf+0x6c>
     d3a:	9a 95       	dec	r25
     d3c:	66 0f       	add	r22, r22
     d3e:	77 1f       	adc	r23, r23
     d40:	88 1f       	adc	r24, r24
     d42:	da f7       	brpl	.-10     	; 0xd3a <__floatsisf+0x62>
     d44:	88 0f       	add	r24, r24
     d46:	96 95       	lsr	r25
     d48:	87 95       	ror	r24
     d4a:	97 f9       	bld	r25, 7
     d4c:	08 95       	ret

00000d4e <__fp_inf>:
     d4e:	97 f9       	bld	r25, 7
     d50:	9f 67       	ori	r25, 0x7F	; 127
     d52:	80 e8       	ldi	r24, 0x80	; 128
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	08 95       	ret

00000d5a <__fp_nan>:
     d5a:	9f ef       	ldi	r25, 0xFF	; 255
     d5c:	80 ec       	ldi	r24, 0xC0	; 192
     d5e:	08 95       	ret

00000d60 <__fp_pscA>:
     d60:	00 24       	eor	r0, r0
     d62:	0a 94       	dec	r0
     d64:	16 16       	cp	r1, r22
     d66:	17 06       	cpc	r1, r23
     d68:	18 06       	cpc	r1, r24
     d6a:	09 06       	cpc	r0, r25
     d6c:	08 95       	ret

00000d6e <__fp_pscB>:
     d6e:	00 24       	eor	r0, r0
     d70:	0a 94       	dec	r0
     d72:	12 16       	cp	r1, r18
     d74:	13 06       	cpc	r1, r19
     d76:	14 06       	cpc	r1, r20
     d78:	05 06       	cpc	r0, r21
     d7a:	08 95       	ret

00000d7c <__fp_round>:
     d7c:	09 2e       	mov	r0, r25
     d7e:	03 94       	inc	r0
     d80:	00 0c       	add	r0, r0
     d82:	11 f4       	brne	.+4      	; 0xd88 <__fp_round+0xc>
     d84:	88 23       	and	r24, r24
     d86:	52 f0       	brmi	.+20     	; 0xd9c <__fp_round+0x20>
     d88:	bb 0f       	add	r27, r27
     d8a:	40 f4       	brcc	.+16     	; 0xd9c <__fp_round+0x20>
     d8c:	bf 2b       	or	r27, r31
     d8e:	11 f4       	brne	.+4      	; 0xd94 <__fp_round+0x18>
     d90:	60 ff       	sbrs	r22, 0
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <__fp_round+0x20>
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	8f 4f       	sbci	r24, 0xFF	; 255
     d9a:	9f 4f       	sbci	r25, 0xFF	; 255
     d9c:	08 95       	ret

00000d9e <__fp_split3>:
     d9e:	57 fd       	sbrc	r21, 7
     da0:	90 58       	subi	r25, 0x80	; 128
     da2:	44 0f       	add	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	59 f0       	breq	.+22     	; 0xdbe <__fp_splitA+0x10>
     da8:	5f 3f       	cpi	r21, 0xFF	; 255
     daa:	71 f0       	breq	.+28     	; 0xdc8 <__fp_splitA+0x1a>
     dac:	47 95       	ror	r20

00000dae <__fp_splitA>:
     dae:	88 0f       	add	r24, r24
     db0:	97 fb       	bst	r25, 7
     db2:	99 1f       	adc	r25, r25
     db4:	61 f0       	breq	.+24     	; 0xdce <__fp_splitA+0x20>
     db6:	9f 3f       	cpi	r25, 0xFF	; 255
     db8:	79 f0       	breq	.+30     	; 0xdd8 <__fp_splitA+0x2a>
     dba:	87 95       	ror	r24
     dbc:	08 95       	ret
     dbe:	12 16       	cp	r1, r18
     dc0:	13 06       	cpc	r1, r19
     dc2:	14 06       	cpc	r1, r20
     dc4:	55 1f       	adc	r21, r21
     dc6:	f2 cf       	rjmp	.-28     	; 0xdac <__fp_split3+0xe>
     dc8:	46 95       	lsr	r20
     dca:	f1 df       	rcall	.-30     	; 0xdae <__fp_splitA>
     dcc:	08 c0       	rjmp	.+16     	; 0xdde <__fp_splitA+0x30>
     dce:	16 16       	cp	r1, r22
     dd0:	17 06       	cpc	r1, r23
     dd2:	18 06       	cpc	r1, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	f1 cf       	rjmp	.-30     	; 0xdba <__fp_splitA+0xc>
     dd8:	86 95       	lsr	r24
     dda:	71 05       	cpc	r23, r1
     ddc:	61 05       	cpc	r22, r1
     dde:	08 94       	sec
     de0:	08 95       	ret

00000de2 <__fp_zero>:
     de2:	e8 94       	clt

00000de4 <__fp_szero>:
     de4:	bb 27       	eor	r27, r27
     de6:	66 27       	eor	r22, r22
     de8:	77 27       	eor	r23, r23
     dea:	cb 01       	movw	r24, r22
     dec:	97 f9       	bld	r25, 7
     dee:	08 95       	ret

00000df0 <__mulsf3>:
     df0:	0e 94 0b 07 	call	0xe16	; 0xe16 <__mulsf3x>
     df4:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__fp_round>
     df8:	0e 94 b0 06 	call	0xd60	; 0xd60 <__fp_pscA>
     dfc:	38 f0       	brcs	.+14     	; 0xe0c <__mulsf3+0x1c>
     dfe:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__fp_pscB>
     e02:	20 f0       	brcs	.+8      	; 0xe0c <__mulsf3+0x1c>
     e04:	95 23       	and	r25, r21
     e06:	11 f0       	breq	.+4      	; 0xe0c <__mulsf3+0x1c>
     e08:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_inf>
     e0c:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_nan>
     e10:	11 24       	eor	r1, r1
     e12:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_szero>

00000e16 <__mulsf3x>:
     e16:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_split3>
     e1a:	70 f3       	brcs	.-36     	; 0xdf8 <__mulsf3+0x8>

00000e1c <__mulsf3_pse>:
     e1c:	95 9f       	mul	r25, r21
     e1e:	c1 f3       	breq	.-16     	; 0xe10 <__mulsf3+0x20>
     e20:	95 0f       	add	r25, r21
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	55 1f       	adc	r21, r21
     e26:	62 9f       	mul	r22, r18
     e28:	f0 01       	movw	r30, r0
     e2a:	72 9f       	mul	r23, r18
     e2c:	bb 27       	eor	r27, r27
     e2e:	f0 0d       	add	r31, r0
     e30:	b1 1d       	adc	r27, r1
     e32:	63 9f       	mul	r22, r19
     e34:	aa 27       	eor	r26, r26
     e36:	f0 0d       	add	r31, r0
     e38:	b1 1d       	adc	r27, r1
     e3a:	aa 1f       	adc	r26, r26
     e3c:	64 9f       	mul	r22, r20
     e3e:	66 27       	eor	r22, r22
     e40:	b0 0d       	add	r27, r0
     e42:	a1 1d       	adc	r26, r1
     e44:	66 1f       	adc	r22, r22
     e46:	82 9f       	mul	r24, r18
     e48:	22 27       	eor	r18, r18
     e4a:	b0 0d       	add	r27, r0
     e4c:	a1 1d       	adc	r26, r1
     e4e:	62 1f       	adc	r22, r18
     e50:	73 9f       	mul	r23, r19
     e52:	b0 0d       	add	r27, r0
     e54:	a1 1d       	adc	r26, r1
     e56:	62 1f       	adc	r22, r18
     e58:	83 9f       	mul	r24, r19
     e5a:	a0 0d       	add	r26, r0
     e5c:	61 1d       	adc	r22, r1
     e5e:	22 1f       	adc	r18, r18
     e60:	74 9f       	mul	r23, r20
     e62:	33 27       	eor	r19, r19
     e64:	a0 0d       	add	r26, r0
     e66:	61 1d       	adc	r22, r1
     e68:	23 1f       	adc	r18, r19
     e6a:	84 9f       	mul	r24, r20
     e6c:	60 0d       	add	r22, r0
     e6e:	21 1d       	adc	r18, r1
     e70:	82 2f       	mov	r24, r18
     e72:	76 2f       	mov	r23, r22
     e74:	6a 2f       	mov	r22, r26
     e76:	11 24       	eor	r1, r1
     e78:	9f 57       	subi	r25, 0x7F	; 127
     e7a:	50 40       	sbci	r21, 0x00	; 0
     e7c:	9a f0       	brmi	.+38     	; 0xea4 <__mulsf3_pse+0x88>
     e7e:	f1 f0       	breq	.+60     	; 0xebc <__mulsf3_pse+0xa0>
     e80:	88 23       	and	r24, r24
     e82:	4a f0       	brmi	.+18     	; 0xe96 <__mulsf3_pse+0x7a>
     e84:	ee 0f       	add	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	bb 1f       	adc	r27, r27
     e8a:	66 1f       	adc	r22, r22
     e8c:	77 1f       	adc	r23, r23
     e8e:	88 1f       	adc	r24, r24
     e90:	91 50       	subi	r25, 0x01	; 1
     e92:	50 40       	sbci	r21, 0x00	; 0
     e94:	a9 f7       	brne	.-22     	; 0xe80 <__mulsf3_pse+0x64>
     e96:	9e 3f       	cpi	r25, 0xFE	; 254
     e98:	51 05       	cpc	r21, r1
     e9a:	80 f0       	brcs	.+32     	; 0xebc <__mulsf3_pse+0xa0>
     e9c:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_inf>
     ea0:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_szero>
     ea4:	5f 3f       	cpi	r21, 0xFF	; 255
     ea6:	e4 f3       	brlt	.-8      	; 0xea0 <__mulsf3_pse+0x84>
     ea8:	98 3e       	cpi	r25, 0xE8	; 232
     eaa:	d4 f3       	brlt	.-12     	; 0xea0 <__mulsf3_pse+0x84>
     eac:	86 95       	lsr	r24
     eae:	77 95       	ror	r23
     eb0:	67 95       	ror	r22
     eb2:	b7 95       	ror	r27
     eb4:	f7 95       	ror	r31
     eb6:	e7 95       	ror	r30
     eb8:	9f 5f       	subi	r25, 0xFF	; 255
     eba:	c1 f7       	brne	.-16     	; 0xeac <__mulsf3_pse+0x90>
     ebc:	fe 2b       	or	r31, r30
     ebe:	88 0f       	add	r24, r24
     ec0:	91 1d       	adc	r25, r1
     ec2:	96 95       	lsr	r25
     ec4:	87 95       	ror	r24
     ec6:	97 f9       	bld	r25, 7
     ec8:	08 95       	ret

00000eca <pow>:
     eca:	fa 01       	movw	r30, r20
     ecc:	ee 0f       	add	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	30 96       	adiw	r30, 0x00	; 0
     ed2:	21 05       	cpc	r18, r1
     ed4:	31 05       	cpc	r19, r1
     ed6:	a1 f1       	breq	.+104    	; 0xf40 <pow+0x76>
     ed8:	61 15       	cp	r22, r1
     eda:	71 05       	cpc	r23, r1
     edc:	61 f4       	brne	.+24     	; 0xef6 <pow+0x2c>
     ede:	80 38       	cpi	r24, 0x80	; 128
     ee0:	bf e3       	ldi	r27, 0x3F	; 63
     ee2:	9b 07       	cpc	r25, r27
     ee4:	49 f1       	breq	.+82     	; 0xf38 <pow+0x6e>
     ee6:	68 94       	set
     ee8:	90 38       	cpi	r25, 0x80	; 128
     eea:	81 05       	cpc	r24, r1
     eec:	61 f0       	breq	.+24     	; 0xf06 <pow+0x3c>
     eee:	80 38       	cpi	r24, 0x80	; 128
     ef0:	bf ef       	ldi	r27, 0xFF	; 255
     ef2:	9b 07       	cpc	r25, r27
     ef4:	41 f0       	breq	.+16     	; 0xf06 <pow+0x3c>
     ef6:	99 23       	and	r25, r25
     ef8:	4a f5       	brpl	.+82     	; 0xf4c <pow+0x82>
     efa:	ff 3f       	cpi	r31, 0xFF	; 255
     efc:	e1 05       	cpc	r30, r1
     efe:	31 05       	cpc	r19, r1
     f00:	21 05       	cpc	r18, r1
     f02:	19 f1       	breq	.+70     	; 0xf4a <pow+0x80>
     f04:	e8 94       	clt
     f06:	08 94       	sec
     f08:	e7 95       	ror	r30
     f0a:	d9 01       	movw	r26, r18
     f0c:	aa 23       	and	r26, r26
     f0e:	29 f4       	brne	.+10     	; 0xf1a <pow+0x50>
     f10:	ab 2f       	mov	r26, r27
     f12:	be 2f       	mov	r27, r30
     f14:	f8 5f       	subi	r31, 0xF8	; 248
     f16:	d0 f3       	brcs	.-12     	; 0xf0c <pow+0x42>
     f18:	10 c0       	rjmp	.+32     	; 0xf3a <pow+0x70>
     f1a:	ff 5f       	subi	r31, 0xFF	; 255
     f1c:	70 f4       	brcc	.+28     	; 0xf3a <pow+0x70>
     f1e:	a6 95       	lsr	r26
     f20:	e0 f7       	brcc	.-8      	; 0xf1a <pow+0x50>
     f22:	f7 39       	cpi	r31, 0x97	; 151
     f24:	50 f0       	brcs	.+20     	; 0xf3a <pow+0x70>
     f26:	19 f0       	breq	.+6      	; 0xf2e <pow+0x64>
     f28:	ff 3a       	cpi	r31, 0xAF	; 175
     f2a:	38 f4       	brcc	.+14     	; 0xf3a <pow+0x70>
     f2c:	9f 77       	andi	r25, 0x7F	; 127
     f2e:	9f 93       	push	r25
     f30:	0d d0       	rcall	.+26     	; 0xf4c <pow+0x82>
     f32:	0f 90       	pop	r0
     f34:	07 fc       	sbrc	r0, 7
     f36:	90 58       	subi	r25, 0x80	; 128
     f38:	08 95       	ret
     f3a:	46 f0       	brts	.+16     	; 0xf4c <pow+0x82>
     f3c:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_nan>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	80 e8       	ldi	r24, 0x80	; 128
     f46:	9f e3       	ldi	r25, 0x3F	; 63
     f48:	08 95       	ret
     f4a:	4f e7       	ldi	r20, 0x7F	; 127
     f4c:	9f 77       	andi	r25, 0x7F	; 127
     f4e:	5f 93       	push	r21
     f50:	4f 93       	push	r20
     f52:	3f 93       	push	r19
     f54:	2f 93       	push	r18
     f56:	0e 94 60 08 	call	0x10c0	; 0x10c0 <log>
     f5a:	2f 91       	pop	r18
     f5c:	3f 91       	pop	r19
     f5e:	4f 91       	pop	r20
     f60:	5f 91       	pop	r21
     f62:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__mulsf3>
     f66:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <exp>
     f6a:	29 f4       	brne	.+10     	; 0xf76 <pow+0xac>
     f6c:	16 f0       	brts	.+4      	; 0xf72 <pow+0xa8>
     f6e:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_inf>
     f72:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_zero>
     f76:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_nan>

00000f7a <exp>:
     f7a:	0e 94 d7 06 	call	0xdae	; 0xdae <__fp_splitA>
     f7e:	a8 f3       	brcs	.-22     	; 0xf6a <pow+0xa0>
     f80:	96 38       	cpi	r25, 0x86	; 134
     f82:	a0 f7       	brcc	.-24     	; 0xf6c <pow+0xa2>
     f84:	07 f8       	bld	r0, 7
     f86:	0f 92       	push	r0
     f88:	e8 94       	clt
     f8a:	2b e3       	ldi	r18, 0x3B	; 59
     f8c:	3a ea       	ldi	r19, 0xAA	; 170
     f8e:	48 eb       	ldi	r20, 0xB8	; 184
     f90:	5f e7       	ldi	r21, 0x7F	; 127
     f92:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__mulsf3_pse>
     f96:	0f 92       	push	r0
     f98:	0f 92       	push	r0
     f9a:	0f 92       	push	r0
     f9c:	4d b7       	in	r20, 0x3d	; 61
     f9e:	5e b7       	in	r21, 0x3e	; 62
     fa0:	0f 92       	push	r0
     fa2:	0e 94 a8 08 	call	0x1150	; 0x1150 <modf>
     fa6:	e8 e6       	ldi	r30, 0x68	; 104
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_powser>
     fae:	4f 91       	pop	r20
     fb0:	5f 91       	pop	r21
     fb2:	ef 91       	pop	r30
     fb4:	ff 91       	pop	r31
     fb6:	e5 95       	asr	r30
     fb8:	ee 1f       	adc	r30, r30
     fba:	ff 1f       	adc	r31, r31
     fbc:	49 f0       	breq	.+18     	; 0xfd0 <exp+0x56>
     fbe:	fe 57       	subi	r31, 0x7E	; 126
     fc0:	e0 68       	ori	r30, 0x80	; 128
     fc2:	44 27       	eor	r20, r20
     fc4:	ee 0f       	add	r30, r30
     fc6:	44 1f       	adc	r20, r20
     fc8:	fa 95       	dec	r31
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <exp+0x4a>
     fcc:	41 95       	neg	r20
     fce:	55 0b       	sbc	r21, r21
     fd0:	0e 94 22 08 	call	0x1044	; 0x1044 <ldexp>
     fd4:	0f 90       	pop	r0
     fd6:	07 fe       	sbrs	r0, 7
     fd8:	0c 94 16 08 	jmp	0x102c	; 0x102c <inverse>
     fdc:	08 95       	ret

00000fde <__fp_powser>:
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	1f 93       	push	r17
     fe4:	0f 93       	push	r16
     fe6:	ff 92       	push	r15
     fe8:	ef 92       	push	r14
     fea:	df 92       	push	r13
     fec:	7b 01       	movw	r14, r22
     fee:	8c 01       	movw	r16, r24
     ff0:	68 94       	set
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <__fp_powser+0x22>
     ff4:	da 2e       	mov	r13, r26
     ff6:	ef 01       	movw	r28, r30
     ff8:	0e 94 0b 07 	call	0xe16	; 0xe16 <__mulsf3x>
     ffc:	fe 01       	movw	r30, r28
     ffe:	e8 94       	clt
    1000:	a5 91       	lpm	r26, Z+
    1002:	25 91       	lpm	r18, Z+
    1004:	35 91       	lpm	r19, Z+
    1006:	45 91       	lpm	r20, Z+
    1008:	55 91       	lpm	r21, Z+
    100a:	a6 f3       	brts	.-24     	; 0xff4 <__fp_powser+0x16>
    100c:	ef 01       	movw	r28, r30
    100e:	0e 94 6d 05 	call	0xada	; 0xada <__addsf3x>
    1012:	fe 01       	movw	r30, r28
    1014:	97 01       	movw	r18, r14
    1016:	a8 01       	movw	r20, r16
    1018:	da 94       	dec	r13
    101a:	69 f7       	brne	.-38     	; 0xff6 <__fp_powser+0x18>
    101c:	df 90       	pop	r13
    101e:	ef 90       	pop	r14
    1020:	ff 90       	pop	r15
    1022:	0f 91       	pop	r16
    1024:	1f 91       	pop	r17
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <inverse>:
    102c:	9b 01       	movw	r18, r22
    102e:	ac 01       	movw	r20, r24
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	80 e8       	ldi	r24, 0x80	; 128
    1036:	9f e3       	ldi	r25, 0x3F	; 63
    1038:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__divsf3>
    103c:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_inf>
    1040:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__fp_mpack>

00001044 <ldexp>:
    1044:	0e 94 d7 06 	call	0xdae	; 0xdae <__fp_splitA>
    1048:	d8 f3       	brcs	.-10     	; 0x1040 <inverse+0x14>
    104a:	99 23       	and	r25, r25
    104c:	c9 f3       	breq	.-14     	; 0x1040 <inverse+0x14>
    104e:	94 0f       	add	r25, r20
    1050:	51 1d       	adc	r21, r1
    1052:	a3 f3       	brvs	.-24     	; 0x103c <inverse+0x10>
    1054:	91 50       	subi	r25, 0x01	; 1
    1056:	50 40       	sbci	r21, 0x00	; 0
    1058:	94 f0       	brlt	.+36     	; 0x107e <ldexp+0x3a>
    105a:	59 f0       	breq	.+22     	; 0x1072 <ldexp+0x2e>
    105c:	88 23       	and	r24, r24
    105e:	32 f0       	brmi	.+12     	; 0x106c <ldexp+0x28>
    1060:	66 0f       	add	r22, r22
    1062:	77 1f       	adc	r23, r23
    1064:	88 1f       	adc	r24, r24
    1066:	91 50       	subi	r25, 0x01	; 1
    1068:	50 40       	sbci	r21, 0x00	; 0
    106a:	c1 f7       	brne	.-16     	; 0x105c <ldexp+0x18>
    106c:	9e 3f       	cpi	r25, 0xFE	; 254
    106e:	51 05       	cpc	r21, r1
    1070:	2c f7       	brge	.-54     	; 0x103c <inverse+0x10>
    1072:	88 0f       	add	r24, r24
    1074:	91 1d       	adc	r25, r1
    1076:	96 95       	lsr	r25
    1078:	87 95       	ror	r24
    107a:	97 f9       	bld	r25, 7
    107c:	08 95       	ret
    107e:	5f 3f       	cpi	r21, 0xFF	; 255
    1080:	ac f0       	brlt	.+42     	; 0x10ac <ldexp+0x68>
    1082:	98 3e       	cpi	r25, 0xE8	; 232
    1084:	9c f0       	brlt	.+38     	; 0x10ac <ldexp+0x68>
    1086:	bb 27       	eor	r27, r27
    1088:	86 95       	lsr	r24
    108a:	77 95       	ror	r23
    108c:	67 95       	ror	r22
    108e:	b7 95       	ror	r27
    1090:	08 f4       	brcc	.+2      	; 0x1094 <ldexp+0x50>
    1092:	b1 60       	ori	r27, 0x01	; 1
    1094:	93 95       	inc	r25
    1096:	c1 f7       	brne	.-16     	; 0x1088 <ldexp+0x44>
    1098:	bb 0f       	add	r27, r27
    109a:	58 f7       	brcc	.-42     	; 0x1072 <ldexp+0x2e>
    109c:	11 f4       	brne	.+4      	; 0x10a2 <ldexp+0x5e>
    109e:	60 ff       	sbrs	r22, 0
    10a0:	e8 cf       	rjmp	.-48     	; 0x1072 <ldexp+0x2e>
    10a2:	6f 5f       	subi	r22, 0xFF	; 255
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255
    10a6:	8f 4f       	sbci	r24, 0xFF	; 255
    10a8:	9f 4f       	sbci	r25, 0xFF	; 255
    10aa:	e3 cf       	rjmp	.-58     	; 0x1072 <ldexp+0x2e>
    10ac:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_szero>
    10b0:	16 f0       	brts	.+4      	; 0x10b6 <ldexp+0x72>
    10b2:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__fp_mpack>
    10b6:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_nan>
    10ba:	68 94       	set
    10bc:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__fp_inf>

000010c0 <log>:
    10c0:	0e 94 d7 06 	call	0xdae	; 0xdae <__fp_splitA>
    10c4:	a8 f3       	brcs	.-22     	; 0x10b0 <ldexp+0x6c>
    10c6:	99 23       	and	r25, r25
    10c8:	c1 f3       	breq	.-16     	; 0x10ba <ldexp+0x76>
    10ca:	ae f3       	brts	.-22     	; 0x10b6 <ldexp+0x72>
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	1f 93       	push	r17
    10d2:	0f 93       	push	r16
    10d4:	ff 92       	push	r15
    10d6:	c9 2f       	mov	r28, r25
    10d8:	dd 27       	eor	r29, r29
    10da:	88 23       	and	r24, r24
    10dc:	2a f0       	brmi	.+10     	; 0x10e8 <log+0x28>
    10de:	21 97       	sbiw	r28, 0x01	; 1
    10e0:	66 0f       	add	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	da f7       	brpl	.-10     	; 0x10de <log+0x1e>
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e8       	ldi	r20, 0x80	; 128
    10ee:	5f eb       	ldi	r21, 0xBF	; 191
    10f0:	9f e3       	ldi	r25, 0x3F	; 63
    10f2:	88 39       	cpi	r24, 0x98	; 152
    10f4:	20 f0       	brcs	.+8      	; 0x10fe <log+0x3e>
    10f6:	80 3e       	cpi	r24, 0xE0	; 224
    10f8:	38 f0       	brcs	.+14     	; 0x1108 <log+0x48>
    10fa:	21 96       	adiw	r28, 0x01	; 1
    10fc:	8f 77       	andi	r24, 0x7F	; 127
    10fe:	0e 94 56 05 	call	0xaac	; 0xaac <__addsf3>
    1102:	e0 e9       	ldi	r30, 0x90	; 144
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <log+0x50>
    1108:	0e 94 56 05 	call	0xaac	; 0xaac <__addsf3>
    110c:	ed eb       	ldi	r30, 0xBD	; 189
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_powser>
    1114:	8b 01       	movw	r16, r22
    1116:	be 01       	movw	r22, r28
    1118:	ec 01       	movw	r28, r24
    111a:	fb 2e       	mov	r15, r27
    111c:	6f 57       	subi	r22, 0x7F	; 127
    111e:	71 09       	sbc	r23, r1
    1120:	75 95       	asr	r23
    1122:	77 1f       	adc	r23, r23
    1124:	88 0b       	sbc	r24, r24
    1126:	99 0b       	sbc	r25, r25
    1128:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__floatsisf>
    112c:	28 e1       	ldi	r18, 0x18	; 24
    112e:	32 e7       	ldi	r19, 0x72	; 114
    1130:	41 e3       	ldi	r20, 0x31	; 49
    1132:	5f e3       	ldi	r21, 0x3F	; 63
    1134:	0e 94 0b 07 	call	0xe16	; 0xe16 <__mulsf3x>
    1138:	af 2d       	mov	r26, r15
    113a:	98 01       	movw	r18, r16
    113c:	ae 01       	movw	r20, r28
    113e:	ff 90       	pop	r15
    1140:	0f 91       	pop	r16
    1142:	1f 91       	pop	r17
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	0e 94 6d 05 	call	0xada	; 0xada <__addsf3x>
    114c:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__fp_round>

00001150 <modf>:
    1150:	fa 01       	movw	r30, r20
    1152:	dc 01       	movw	r26, r24
    1154:	aa 0f       	add	r26, r26
    1156:	bb 1f       	adc	r27, r27
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	bf 57       	subi	r27, 0x7F	; 127
    115e:	28 f4       	brcc	.+10     	; 0x116a <modf+0x1a>
    1160:	22 27       	eor	r18, r18
    1162:	33 27       	eor	r19, r19
    1164:	44 27       	eor	r20, r20
    1166:	50 78       	andi	r21, 0x80	; 128
    1168:	20 c0       	rjmp	.+64     	; 0x11aa <modf+0x5a>
    116a:	b7 51       	subi	r27, 0x17	; 23
    116c:	90 f4       	brcc	.+36     	; 0x1192 <modf+0x42>
    116e:	ab 2f       	mov	r26, r27
    1170:	00 24       	eor	r0, r0
    1172:	46 95       	lsr	r20
    1174:	37 95       	ror	r19
    1176:	27 95       	ror	r18
    1178:	01 1c       	adc	r0, r1
    117a:	a3 95       	inc	r26
    117c:	d2 f3       	brmi	.-12     	; 0x1172 <modf+0x22>
    117e:	00 20       	and	r0, r0
    1180:	71 f0       	breq	.+28     	; 0x119e <modf+0x4e>
    1182:	22 0f       	add	r18, r18
    1184:	33 1f       	adc	r19, r19
    1186:	44 1f       	adc	r20, r20
    1188:	b3 95       	inc	r27
    118a:	da f3       	brmi	.-10     	; 0x1182 <modf+0x32>
    118c:	0e d0       	rcall	.+28     	; 0x11aa <modf+0x5a>
    118e:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__subsf3>
    1192:	61 30       	cpi	r22, 0x01	; 1
    1194:	71 05       	cpc	r23, r1
    1196:	a0 e8       	ldi	r26, 0x80	; 128
    1198:	8a 07       	cpc	r24, r26
    119a:	b9 46       	sbci	r27, 0x69	; 105
    119c:	30 f4       	brcc	.+12     	; 0x11aa <modf+0x5a>
    119e:	9b 01       	movw	r18, r22
    11a0:	ac 01       	movw	r20, r24
    11a2:	66 27       	eor	r22, r22
    11a4:	77 27       	eor	r23, r23
    11a6:	88 27       	eor	r24, r24
    11a8:	90 78       	andi	r25, 0x80	; 128
    11aa:	30 96       	adiw	r30, 0x00	; 0
    11ac:	21 f0       	breq	.+8      	; 0x11b6 <modf+0x66>
    11ae:	20 83       	st	Z, r18
    11b0:	31 83       	std	Z+1, r19	; 0x01
    11b2:	42 83       	std	Z+2, r20	; 0x02
    11b4:	53 83       	std	Z+3, r21	; 0x03
    11b6:	08 95       	ret

000011b8 <__fp_mpack>:
    11b8:	9f 3f       	cpi	r25, 0xFF	; 255
    11ba:	31 f0       	breq	.+12     	; 0x11c8 <__fp_mpack_finite+0xc>

000011bc <__fp_mpack_finite>:
    11bc:	91 50       	subi	r25, 0x01	; 1
    11be:	20 f4       	brcc	.+8      	; 0x11c8 <__fp_mpack_finite+0xc>
    11c0:	87 95       	ror	r24
    11c2:	77 95       	ror	r23
    11c4:	67 95       	ror	r22
    11c6:	b7 95       	ror	r27
    11c8:	88 0f       	add	r24, r24
    11ca:	91 1d       	adc	r25, r1
    11cc:	96 95       	lsr	r25
    11ce:	87 95       	ror	r24
    11d0:	97 f9       	bld	r25, 7
    11d2:	08 95       	ret

000011d4 <__mulsi3>:
    11d4:	db 01       	movw	r26, r22
    11d6:	8f 93       	push	r24
    11d8:	9f 93       	push	r25
    11da:	0e 94 1c 09 	call	0x1238	; 0x1238 <__muluhisi3>
    11de:	bf 91       	pop	r27
    11e0:	af 91       	pop	r26
    11e2:	a2 9f       	mul	r26, r18
    11e4:	80 0d       	add	r24, r0
    11e6:	91 1d       	adc	r25, r1
    11e8:	a3 9f       	mul	r26, r19
    11ea:	90 0d       	add	r25, r0
    11ec:	b2 9f       	mul	r27, r18
    11ee:	90 0d       	add	r25, r0
    11f0:	11 24       	eor	r1, r1
    11f2:	08 95       	ret

000011f4 <__udivmodsi4>:
    11f4:	a1 e2       	ldi	r26, 0x21	; 33
    11f6:	1a 2e       	mov	r1, r26
    11f8:	aa 1b       	sub	r26, r26
    11fa:	bb 1b       	sub	r27, r27
    11fc:	fd 01       	movw	r30, r26
    11fe:	0d c0       	rjmp	.+26     	; 0x121a <__udivmodsi4_ep>

00001200 <__udivmodsi4_loop>:
    1200:	aa 1f       	adc	r26, r26
    1202:	bb 1f       	adc	r27, r27
    1204:	ee 1f       	adc	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	a2 17       	cp	r26, r18
    120a:	b3 07       	cpc	r27, r19
    120c:	e4 07       	cpc	r30, r20
    120e:	f5 07       	cpc	r31, r21
    1210:	20 f0       	brcs	.+8      	; 0x121a <__udivmodsi4_ep>
    1212:	a2 1b       	sub	r26, r18
    1214:	b3 0b       	sbc	r27, r19
    1216:	e4 0b       	sbc	r30, r20
    1218:	f5 0b       	sbc	r31, r21

0000121a <__udivmodsi4_ep>:
    121a:	66 1f       	adc	r22, r22
    121c:	77 1f       	adc	r23, r23
    121e:	88 1f       	adc	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	1a 94       	dec	r1
    1224:	69 f7       	brne	.-38     	; 0x1200 <__udivmodsi4_loop>
    1226:	60 95       	com	r22
    1228:	70 95       	com	r23
    122a:	80 95       	com	r24
    122c:	90 95       	com	r25
    122e:	9b 01       	movw	r18, r22
    1230:	ac 01       	movw	r20, r24
    1232:	bd 01       	movw	r22, r26
    1234:	cf 01       	movw	r24, r30
    1236:	08 95       	ret

00001238 <__muluhisi3>:
    1238:	0e 94 2f 09 	call	0x125e	; 0x125e <__umulhisi3>
    123c:	a5 9f       	mul	r26, r21
    123e:	90 0d       	add	r25, r0
    1240:	b4 9f       	mul	r27, r20
    1242:	90 0d       	add	r25, r0
    1244:	a4 9f       	mul	r26, r20
    1246:	80 0d       	add	r24, r0
    1248:	91 1d       	adc	r25, r1
    124a:	11 24       	eor	r1, r1
    124c:	08 95       	ret

0000124e <__mulshisi3>:
    124e:	b7 ff       	sbrs	r27, 7
    1250:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__muluhisi3>

00001254 <__mulohisi3>:
    1254:	0e 94 1c 09 	call	0x1238	; 0x1238 <__muluhisi3>
    1258:	82 1b       	sub	r24, r18
    125a:	93 0b       	sbc	r25, r19
    125c:	08 95       	ret

0000125e <__umulhisi3>:
    125e:	a2 9f       	mul	r26, r18
    1260:	b0 01       	movw	r22, r0
    1262:	b3 9f       	mul	r27, r19
    1264:	c0 01       	movw	r24, r0
    1266:	a3 9f       	mul	r26, r19
    1268:	70 0d       	add	r23, r0
    126a:	81 1d       	adc	r24, r1
    126c:	11 24       	eor	r1, r1
    126e:	91 1d       	adc	r25, r1
    1270:	b2 9f       	mul	r27, r18
    1272:	70 0d       	add	r23, r0
    1274:	81 1d       	adc	r24, r1
    1276:	11 24       	eor	r1, r1
    1278:	91 1d       	adc	r25, r1
    127a:	08 95       	ret

0000127c <__ltoa_ncheck>:
    127c:	bb 27       	eor	r27, r27
    127e:	2a 30       	cpi	r18, 0x0A	; 10
    1280:	51 f4       	brne	.+20     	; 0x1296 <__ltoa_ncheck+0x1a>
    1282:	99 23       	and	r25, r25
    1284:	42 f4       	brpl	.+16     	; 0x1296 <__ltoa_ncheck+0x1a>
    1286:	bd e2       	ldi	r27, 0x2D	; 45
    1288:	90 95       	com	r25
    128a:	80 95       	com	r24
    128c:	70 95       	com	r23
    128e:	61 95       	neg	r22
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	8f 4f       	sbci	r24, 0xFF	; 255
    1294:	9f 4f       	sbci	r25, 0xFF	; 255
    1296:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__ultoa_common>

0000129a <__ultoa_ncheck>:
    129a:	bb 27       	eor	r27, r27

0000129c <__ultoa_common>:
    129c:	fa 01       	movw	r30, r20
    129e:	a6 2f       	mov	r26, r22
    12a0:	62 17       	cp	r22, r18
    12a2:	71 05       	cpc	r23, r1
    12a4:	81 05       	cpc	r24, r1
    12a6:	91 05       	cpc	r25, r1
    12a8:	33 0b       	sbc	r19, r19
    12aa:	30 fb       	bst	r19, 0
    12ac:	66 f0       	brts	.+24     	; 0x12c6 <__ultoa_common+0x2a>
    12ae:	aa 27       	eor	r26, r26
    12b0:	66 0f       	add	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	88 1f       	adc	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	aa 1f       	adc	r26, r26
    12ba:	a2 17       	cp	r26, r18
    12bc:	10 f0       	brcs	.+4      	; 0x12c2 <__ultoa_common+0x26>
    12be:	a2 1b       	sub	r26, r18
    12c0:	63 95       	inc	r22
    12c2:	38 50       	subi	r19, 0x08	; 8
    12c4:	a9 f7       	brne	.-22     	; 0x12b0 <__ultoa_common+0x14>
    12c6:	a0 5d       	subi	r26, 0xD0	; 208
    12c8:	aa 33       	cpi	r26, 0x3A	; 58
    12ca:	08 f0       	brcs	.+2      	; 0x12ce <__ultoa_common+0x32>
    12cc:	a9 5d       	subi	r26, 0xD9	; 217
    12ce:	a1 93       	st	Z+, r26
    12d0:	36 f7       	brtc	.-52     	; 0x129e <__ultoa_common+0x2>
    12d2:	b1 11       	cpse	r27, r1
    12d4:	b1 93       	st	Z+, r27
    12d6:	10 82       	st	Z, r1
    12d8:	ca 01       	movw	r24, r20
    12da:	0c 94 6f 09 	jmp	0x12de	; 0x12de <strrev>

000012de <strrev>:
    12de:	dc 01       	movw	r26, r24
    12e0:	fc 01       	movw	r30, r24
    12e2:	67 2f       	mov	r22, r23
    12e4:	71 91       	ld	r23, Z+
    12e6:	77 23       	and	r23, r23
    12e8:	e1 f7       	brne	.-8      	; 0x12e2 <strrev+0x4>
    12ea:	32 97       	sbiw	r30, 0x02	; 2
    12ec:	04 c0       	rjmp	.+8      	; 0x12f6 <strrev+0x18>
    12ee:	7c 91       	ld	r23, X
    12f0:	6d 93       	st	X+, r22
    12f2:	70 83       	st	Z, r23
    12f4:	62 91       	ld	r22, -Z
    12f6:	ae 17       	cp	r26, r30
    12f8:	bf 07       	cpc	r27, r31
    12fa:	c8 f3       	brcs	.-14     	; 0x12ee <strrev+0x10>
    12fc:	08 95       	ret

000012fe <_exit>:
    12fe:	f8 94       	cli

00001300 <__stop_program>:
    1300:	ff cf       	rjmp	.-2      	; 0x1300 <__stop_program>


GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000304  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ef7  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000810  00000000  00000000  00001377  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000890  00000000  00000000  00001b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  00002418  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000596  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b9  00000000  00000000  00002b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00003223  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_11>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <main>
  8e:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2c_init>:
		dataRecived[i] = USARTReceive();
	}
	
	//TODO Evaluate Data and do something
	
}
  96:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  9a:	88 e4       	ldi	r24, 0x48	; 72
  9c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  a0:	08 95       	ret

000000a2 <i2c_start>:
  a2:	94 ea       	ldi	r25, 0xA4	; 164
  a4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ac:	99 23       	and	r25, r25
  ae:	e4 f7       	brge	.-8      	; 0xa8 <i2c_start+0x6>
  b0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  b4:	98 7f       	andi	r25, 0xF8	; 248
  b6:	98 30       	cpi	r25, 0x08	; 8
  b8:	11 f0       	breq	.+4      	; 0xbe <i2c_start+0x1c>
  ba:	90 31       	cpi	r25, 0x10	; 16
  bc:	91 f4       	brne	.+36     	; 0xe2 <i2c_start+0x40>
  be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  c2:	84 e8       	ldi	r24, 0x84	; 132
  c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  cc:	88 23       	and	r24, r24
  ce:	e4 f7       	brge	.-8      	; 0xc8 <i2c_start+0x26>
  d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  d4:	88 7f       	andi	r24, 0xF8	; 248
  d6:	88 31       	cpi	r24, 0x18	; 24
  d8:	31 f0       	breq	.+12     	; 0xe6 <i2c_start+0x44>
  da:	80 34       	cpi	r24, 0x40	; 64
  dc:	31 f4       	brne	.+12     	; 0xea <i2c_start+0x48>
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 95       	ret
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	08 95       	ret
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	08 95       	ret

000000ee <i2c_start_wait>:
  ee:	94 ea       	ldi	r25, 0xA4	; 164
  f0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f8:	99 23       	and	r25, r25
  fa:	e4 f7       	brge	.-8      	; 0xf4 <i2c_start_wait+0x6>
  fc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 100:	98 7f       	andi	r25, 0xF8	; 248
 102:	98 30       	cpi	r25, 0x08	; 8
 104:	11 f0       	breq	.+4      	; 0x10a <i2c_start_wait+0x1c>
 106:	90 31       	cpi	r25, 0x10	; 16
 108:	91 f7       	brne	.-28     	; 0xee <i2c_start_wait>
 10a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 10e:	94 e8       	ldi	r25, 0x84	; 132
 110:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 114:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 118:	99 23       	and	r25, r25
 11a:	e4 f7       	brge	.-8      	; 0x114 <i2c_start_wait+0x26>
 11c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 120:	98 7f       	andi	r25, 0xF8	; 248
 122:	90 32       	cpi	r25, 0x20	; 32
 124:	11 f0       	breq	.+4      	; 0x12a <i2c_start_wait+0x3c>
 126:	98 35       	cpi	r25, 0x58	; 88
 128:	41 f4       	brne	.+16     	; 0x13a <i2c_start_wait+0x4c>
 12a:	94 e9       	ldi	r25, 0x94	; 148
 12c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 130:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 134:	94 fd       	sbrc	r25, 4
 136:	fc cf       	rjmp	.-8      	; 0x130 <i2c_start_wait+0x42>
 138:	da cf       	rjmp	.-76     	; 0xee <i2c_start_wait>
 13a:	08 95       	ret

0000013c <i2c_rep_start>:
 13c:	0e 94 51 00 	call	0xa2	; 0xa2 <i2c_start>
 140:	08 95       	ret

00000142 <i2c_stop>:
 142:	84 e9       	ldi	r24, 0x94	; 148
 144:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 148:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 14c:	84 fd       	sbrc	r24, 4
 14e:	fc cf       	rjmp	.-8      	; 0x148 <i2c_stop+0x6>
 150:	08 95       	ret

00000152 <i2c_write>:
 152:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 156:	84 e8       	ldi	r24, 0x84	; 132
 158:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 15c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 160:	88 23       	and	r24, r24
 162:	e4 f7       	brge	.-8      	; 0x15c <i2c_write+0xa>
 164:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 168:	88 7f       	andi	r24, 0xF8	; 248
 16a:	88 32       	cpi	r24, 0x28	; 40
 16c:	11 f0       	breq	.+4      	; 0x172 <i2c_write+0x20>
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	08 95       	ret
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret

00000176 <i2c_readNak>:
 176:	84 e8       	ldi	r24, 0x84	; 132
 178:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 180:	88 23       	and	r24, r24
 182:	e4 f7       	brge	.-8      	; 0x17c <i2c_readNak+0x6>
 184:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 188:	08 95       	ret

0000018a <initUSART>:
 18a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 18e:	87 e6       	ldi	r24, 0x67	; 103
 190:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 194:	88 e1       	ldi	r24, 0x18	; 24
 196:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 19a:	86 e0       	ldi	r24, 0x06	; 6
 19c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1a0:	08 95       	ret

000001a2 <__vector_11>:
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <USART_WaitUntilReady>:
 1b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1ba:	85 ff       	sbrs	r24, 5
 1bc:	fc cf       	rjmp	.-8      	; 0x1b6 <USART_WaitUntilReady>
 1be:	08 95       	ret

000001c0 <USART_Transmit>:
 1c0:	cf 93       	push	r28
 1c2:	c8 2f       	mov	r28, r24
 1c4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_WaitUntilReady>
 1c8:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <DS1307Init>:

void DS1307Init (unsigned char second, unsigned char minute, unsigned char hour) {
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	18 2f       	mov	r17, r24
 1d8:	d6 2f       	mov	r29, r22
 1da:	c4 2f       	mov	r28, r20
	
	unsigned char check;
	
	check = i2c_start(DS1307+I2C_WRITE);
 1dc:	80 ed       	ldi	r24, 0xD0	; 208
 1de:	0e 94 51 00 	call	0xa2	; 0xa2 <i2c_start>
	if ( check ) {
 1e2:	88 23       	and	r24, r24
 1e4:	19 f0       	breq	.+6      	; 0x1ec <DS1307Init+0x1c>
		/* Failed to issue start condition, Error message here */
		i2c_stop();
 1e6:	0e 94 a1 00 	call	0x142	; 0x142 <i2c_stop>
 1ea:	23 c0       	rjmp	.+70     	; 0x232 <DS1307Init+0x62>
	} else {
		i2c_stop();
 1ec:	0e 94 a1 00 	call	0x142	; 0x142 <i2c_stop>
		
		//Initializes the seconds to given value, IMPORTANT: the bit 7 (see datasheet) needs to be a 0 for the clock to run
		i2c_start_wait(DS1307+I2C_WRITE);
 1f0:	80 ed       	ldi	r24, 0xD0	; 208
 1f2:	0e 94 77 00 	call	0xee	; 0xee <i2c_start_wait>
		i2c_write(DS1307Second);
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 a9 00 	call	0x152	; 0x152 <i2c_write>
		i2c_write(second);
 1fc:	81 2f       	mov	r24, r17
 1fe:	0e 94 a9 00 	call	0x152	; 0x152 <i2c_write>
		i2c_stop();
 202:	0e 94 a1 00 	call	0x142	; 0x142 <i2c_stop>
	
		//Initializes the Minutes to given value
		i2c_start_wait(DS1307+I2C_WRITE);
 206:	80 ed       	ldi	r24, 0xD0	; 208
 208:	0e 94 77 00 	call	0xee	; 0xee <i2c_start_wait>
		i2c_write(DS1307Minute);
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 a9 00 	call	0x152	; 0x152 <i2c_write>
		i2c_write(minute);
 212:	8d 2f       	mov	r24, r29
 214:	0e 94 a9 00 	call	0x152	; 0x152 <i2c_write>
		i2c_stop();
 218:	0e 94 a1 00 	call	0x142	; 0x142 <i2c_stop>
	
		//Initializes the Hour to given value
		i2c_start_wait(DS1307+I2C_WRITE);
 21c:	80 ed       	ldi	r24, 0xD0	; 208
 21e:	0e 94 77 00 	call	0xee	; 0xee <i2c_start_wait>
		i2c_write(DS1307Hour);
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	0e 94 a9 00 	call	0x152	; 0x152 <i2c_write>
		i2c_write(hour);
 228:	8c 2f       	mov	r24, r28
 22a:	0e 94 a9 00 	call	0x152	; 0x152 <i2c_write>
		i2c_stop();
 22e:	0e 94 a1 00 	call	0x142	; 0x142 <i2c_stop>
		
		//... are days ... important?
	}
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	08 95       	ret

0000023a <DS1307ReadToUart>:

void DS1307ReadToUart ( void ) {
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
	unsigned char second;
	unsigned char minute;
	unsigned char hour;
	
	i2c_start_wait(DS1307+I2C_WRITE);
 240:	80 ed       	ldi	r24, 0xD0	; 208
 242:	0e 94 77 00 	call	0xee	; 0xee <i2c_start_wait>
	i2c_write(DS1307Second);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 a9 00 	call	0x152	; 0x152 <i2c_write>
	i2c_rep_start(DS1307+I2C_READ);
 24c:	81 ed       	ldi	r24, 0xD1	; 209
 24e:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_rep_start>
	second = i2c_readNak();
 252:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_readNak>
 256:	18 2f       	mov	r17, r24
	i2c_stop();
 258:	0e 94 a1 00 	call	0x142	; 0x142 <i2c_stop>
	
	i2c_start_wait(DS1307+I2C_WRITE);
 25c:	80 ed       	ldi	r24, 0xD0	; 208
 25e:	0e 94 77 00 	call	0xee	; 0xee <i2c_start_wait>
	i2c_write(DS1307Minute);
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 a9 00 	call	0x152	; 0x152 <i2c_write>
	i2c_rep_start(DS1307+I2C_READ);
 268:	81 ed       	ldi	r24, 0xD1	; 209
 26a:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_rep_start>
	minute = i2c_readNak();
 26e:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_readNak>
 272:	d8 2f       	mov	r29, r24
	i2c_stop();
 274:	0e 94 a1 00 	call	0x142	; 0x142 <i2c_stop>
	
	i2c_start_wait(DS1307+I2C_WRITE);
 278:	80 ed       	ldi	r24, 0xD0	; 208
 27a:	0e 94 77 00 	call	0xee	; 0xee <i2c_start_wait>
	i2c_write(DS1307Hour);
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	0e 94 a9 00 	call	0x152	; 0x152 <i2c_write>
	i2c_rep_start(DS1307+I2C_READ);
 284:	81 ed       	ldi	r24, 0xD1	; 209
 286:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_rep_start>
	hour = i2c_readNak();
 28a:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_readNak>
 28e:	c8 2f       	mov	r28, r24
	i2c_stop();
 290:	0e 94 a1 00 	call	0x142	; 0x142 <i2c_stop>
	
	USART_Transmit('S');
 294:	83 e5       	ldi	r24, 0x53	; 83
 296:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <USART_Transmit>
	USART_Transmit(second);
 29a:	81 2f       	mov	r24, r17
 29c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <USART_Transmit>
	USART_Transmit('M');
 2a0:	8d e4       	ldi	r24, 0x4D	; 77
 2a2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <USART_Transmit>
	USART_Transmit(minute);
 2a6:	8d 2f       	mov	r24, r29
 2a8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <USART_Transmit>
	USART_Transmit('H');
 2ac:	88 e4       	ldi	r24, 0x48	; 72
 2ae:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <USART_Transmit>
	USART_Transmit(hour);
 2b2:	8c 2f       	mov	r24, r28
 2b4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <USART_Transmit>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	9f ef       	ldi	r25, 0xFF	; 255
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <DS1307ReadToUart+0x8e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2be:	e0 e9       	ldi	r30, 0x90	; 144
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <DS1307ReadToUart+0x88>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c8:	00 97       	sbiw	r24, 0x00	; 0
 2ca:	c9 f7       	brne	.-14     	; 0x2be <DS1307ReadToUart+0x84>
	_delay_ms(10000);
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	08 95       	ret

000002d4 <main>:

int main(void) {
	
	unsigned char ret;
	
	initUSART();
 2d4:	0e 94 c5 00 	call	0x18a	; 0x18a <initUSART>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2d8:	80 e1       	ldi	r24, 0x10	; 16
 2da:	97 e2       	ldi	r25, 0x27	; 39
 2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <main+0x14>
 2de:	e0 e9       	ldi	r30, 0x90	; 144
 2e0:	f1 e0       	ldi	r31, 0x01	; 1
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <main+0xe>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	c9 f7       	brne	.-14     	; 0x2de <main+0xa>
	_delay_ms(1000); //Temporary
	//initTimer();
	i2c_init();
 2ec:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_init>
	
	DS1307Init(0x00, 0x15, 0x0C);
 2f0:	4c e0       	ldi	r20, 0x0C	; 12
 2f2:	65 e1       	ldi	r22, 0x15	; 21
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DS1307Init>
	
    while (1) {
		DS1307ReadToUart();
 2fa:	0e 94 1d 01 	call	0x23a	; 0x23a <DS1307ReadToUart>
 2fe:	fd cf       	rjmp	.-6      	; 0x2fa <main+0x26>

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>

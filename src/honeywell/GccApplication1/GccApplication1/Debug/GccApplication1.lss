
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000204  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b4a  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000770  00000000  00000000  00000e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000529  00000000  00000000  0000160e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e3  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ac  00000000  00000000  000020db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00002587  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  8e:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initUSART>:
		dataRecived[i] = USARTReceive();
	}
	
	//TODO Evaluate Data and do something
	
}
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ac:	08 95       	ret

000000ae <USART_WaitUntilReady>:
  ae:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b2:	85 ff       	sbrs	r24, 5
  b4:	fc cf       	rjmp	.-8      	; 0xae <USART_WaitUntilReady>
  b6:	08 95       	ret

000000b8 <USART_TransmitPollingHoneywell>:
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	ec 01       	movw	r28, r24
  be:	0e 94 57 00 	call	0xae	; 0xae <USART_WaitUntilReady>
  c2:	20 97       	sbiw	r28, 0x00	; 0
  c4:	59 f0       	breq	.+22     	; 0xdc <USART_TransmitPollingHoneywell+0x24>
  c6:	10 c0       	rjmp	.+32     	; 0xe8 <USART_TransmitPollingHoneywell+0x30>
  c8:	fe 01       	movw	r30, r28
  ca:	e0 5f       	subi	r30, 0xF0	; 240
  cc:	fe 4f       	sbci	r31, 0xFE	; 254
  ce:	80 81       	ld	r24, Z
  d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d4:	0e 94 57 00 	call	0xae	; 0xae <USART_WaitUntilReady>
  d8:	21 96       	adiw	r28, 0x01	; 1
  da:	02 c0       	rjmp	.+4      	; 0xe0 <USART_TransmitPollingHoneywell+0x28>
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	c4 30       	cpi	r28, 0x04	; 4
  e2:	d1 05       	cpc	r29, r1
  e4:	8c f3       	brlt	.-30     	; 0xc8 <USART_TransmitPollingHoneywell+0x10>
  e6:	4e c0       	rjmp	.+156    	; 0x184 <USART_TransmitPollingHoneywell+0xcc>
  e8:	c1 30       	cpi	r28, 0x01	; 1
  ea:	d1 05       	cpc	r29, r1
  ec:	89 f4       	brne	.+34     	; 0x110 <USART_TransmitPollingHoneywell+0x58>
  ee:	0a c0       	rjmp	.+20     	; 0x104 <USART_TransmitPollingHoneywell+0x4c>
  f0:	fe 01       	movw	r30, r28
  f2:	e4 5f       	subi	r30, 0xF4	; 244
  f4:	fe 4f       	sbci	r31, 0xFE	; 254
  f6:	80 81       	ld	r24, Z
  f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  fc:	0e 94 57 00 	call	0xae	; 0xae <USART_WaitUntilReady>
 100:	21 96       	adiw	r28, 0x01	; 1
 102:	02 c0       	rjmp	.+4      	; 0x108 <USART_TransmitPollingHoneywell+0x50>
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	d0 e0       	ldi	r29, 0x00	; 0
 108:	c4 30       	cpi	r28, 0x04	; 4
 10a:	d1 05       	cpc	r29, r1
 10c:	8c f3       	brlt	.-30     	; 0xf0 <USART_TransmitPollingHoneywell+0x38>
 10e:	3a c0       	rjmp	.+116    	; 0x184 <USART_TransmitPollingHoneywell+0xcc>
 110:	c2 30       	cpi	r28, 0x02	; 2
 112:	d1 05       	cpc	r29, r1
 114:	89 f4       	brne	.+34     	; 0x138 <USART_TransmitPollingHoneywell+0x80>
 116:	0a c0       	rjmp	.+20     	; 0x12c <USART_TransmitPollingHoneywell+0x74>
 118:	fe 01       	movw	r30, r28
 11a:	e8 5f       	subi	r30, 0xF8	; 248
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	80 81       	ld	r24, Z
 120:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 124:	0e 94 57 00 	call	0xae	; 0xae <USART_WaitUntilReady>
 128:	21 96       	adiw	r28, 0x01	; 1
 12a:	02 c0       	rjmp	.+4      	; 0x130 <USART_TransmitPollingHoneywell+0x78>
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	d0 e0       	ldi	r29, 0x00	; 0
 130:	c4 30       	cpi	r28, 0x04	; 4
 132:	d1 05       	cpc	r29, r1
 134:	8c f3       	brlt	.-30     	; 0x118 <USART_TransmitPollingHoneywell+0x60>
 136:	26 c0       	rjmp	.+76     	; 0x184 <USART_TransmitPollingHoneywell+0xcc>
 138:	c3 30       	cpi	r28, 0x03	; 3
 13a:	d1 05       	cpc	r29, r1
 13c:	89 f4       	brne	.+34     	; 0x160 <USART_TransmitPollingHoneywell+0xa8>
 13e:	0a c0       	rjmp	.+20     	; 0x154 <USART_TransmitPollingHoneywell+0x9c>
 140:	fe 01       	movw	r30, r28
 142:	ec 5f       	subi	r30, 0xFC	; 252
 144:	fe 4f       	sbci	r31, 0xFE	; 254
 146:	80 81       	ld	r24, Z
 148:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 14c:	0e 94 57 00 	call	0xae	; 0xae <USART_WaitUntilReady>
 150:	21 96       	adiw	r28, 0x01	; 1
 152:	02 c0       	rjmp	.+4      	; 0x158 <USART_TransmitPollingHoneywell+0xa0>
 154:	c0 e0       	ldi	r28, 0x00	; 0
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	c4 30       	cpi	r28, 0x04	; 4
 15a:	d1 05       	cpc	r29, r1
 15c:	8c f3       	brlt	.-30     	; 0x140 <USART_TransmitPollingHoneywell+0x88>
 15e:	12 c0       	rjmp	.+36     	; 0x184 <USART_TransmitPollingHoneywell+0xcc>
 160:	24 97       	sbiw	r28, 0x04	; 4
 162:	81 f4       	brne	.+32     	; 0x184 <USART_TransmitPollingHoneywell+0xcc>
 164:	0a c0       	rjmp	.+20     	; 0x17a <USART_TransmitPollingHoneywell+0xc2>
 166:	fe 01       	movw	r30, r28
 168:	e0 50       	subi	r30, 0x00	; 0
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	80 81       	ld	r24, Z
 16e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 172:	0e 94 57 00 	call	0xae	; 0xae <USART_WaitUntilReady>
 176:	21 96       	adiw	r28, 0x01	; 1
 178:	02 c0       	rjmp	.+4      	; 0x17e <USART_TransmitPollingHoneywell+0xc6>
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	d0 e0       	ldi	r29, 0x00	; 0
 17e:	c4 30       	cpi	r28, 0x04	; 4
 180:	d1 05       	cpc	r29, r1
 182:	8c f3       	brlt	.-30     	; 0x166 <USART_TransmitPollingHoneywell+0xae>
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <main>:

int main(void) {
	initUSART();
 18a:	0e 94 4b 00 	call	0x96	; 0x96 <initUSART>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 18e:	80 e1       	ldi	r24, 0x10	; 16
 190:	97 e2       	ldi	r25, 0x27	; 39
 192:	05 c0       	rjmp	.+10     	; 0x19e <main+0x14>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 194:	e0 e9       	ldi	r30, 0x90	; 144
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0xe>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	c9 f7       	brne	.-14     	; 0x194 <main+0xa>
	_delay_ms(1000); //Temporary
	
    while (1) {
		USART_TransmitPollingHoneywell(STOPAUTOSEND);
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_TransmitPollingHoneywell>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1aa:	80 e5       	ldi	r24, 0x50	; 80
 1ac:	93 ec       	ldi	r25, 0xC3	; 195
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <main+0x30>
 1b0:	e0 e9       	ldi	r30, 0x90	; 144
 1b2:	f1 e0       	ldi	r31, 0x01	; 1
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0x2a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	c9 f7       	brne	.-14     	; 0x1b0 <main+0x26>
		_delay_ms(5000); //Temporary
		USART_TransmitPollingHoneywell(STARTMEASUREMENT);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_TransmitPollingHoneywell>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1c6:	80 e5       	ldi	r24, 0x50	; 80
 1c8:	93 ec       	ldi	r25, 0xC3	; 195
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <main+0x4c>
 1cc:	e0 e9       	ldi	r30, 0x90	; 144
 1ce:	f1 e0       	ldi	r31, 0x01	; 1
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x46>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	c9 f7       	brne	.-14     	; 0x1cc <main+0x42>
		_delay_ms(5000); //Temporary
		USART_TransmitPollingHoneywell(READVALUE);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_TransmitPollingHoneywell>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	9f ef       	ldi	r25, 0xFF	; 255
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <main+0x68>
 1e8:	e0 e9       	ldi	r30, 0x90	; 144
 1ea:	f1 e0       	ldi	r31, 0x01	; 1
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x62>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f2:	00 97       	sbiw	r24, 0x00	; 0
 1f4:	c9 f7       	brne	.-14     	; 0x1e8 <main+0x5e>
		_delay_ms(10000); //Temporary
		USART_TransmitPollingHoneywell(STOPMEASUREMENT);
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_TransmitPollingHoneywell>
    }
 1fe:	d1 cf       	rjmp	.-94     	; 0x1a2 <main+0x18>

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>

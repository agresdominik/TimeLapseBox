
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f5b  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000810  00000000  00000000  0000135b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000090b  00000000  00000000  00001b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  00002478  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005bd  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000726  00000000  00000000  00002c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00003347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_11>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
  8e:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2c_init>:
	//Transmit the saved values via a UART interface
	USART_Transmit(second);
	USART_Transmit(minute);
	USART_Transmit(hour);
	_delay_ms(1000);
}
  96:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  9a:	88 e4       	ldi	r24, 0x48	; 72
  9c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  a0:	08 95       	ret

000000a2 <i2c_start>:
  a2:	94 ea       	ldi	r25, 0xA4	; 164
  a4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ac:	99 23       	and	r25, r25
  ae:	e4 f7       	brge	.-8      	; 0xa8 <i2c_start+0x6>
  b0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  b4:	98 7f       	andi	r25, 0xF8	; 248
  b6:	98 30       	cpi	r25, 0x08	; 8
  b8:	11 f0       	breq	.+4      	; 0xbe <i2c_start+0x1c>
  ba:	90 31       	cpi	r25, 0x10	; 16
  bc:	91 f4       	brne	.+36     	; 0xe2 <i2c_start+0x40>
  be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  c2:	84 e8       	ldi	r24, 0x84	; 132
  c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  cc:	88 23       	and	r24, r24
  ce:	e4 f7       	brge	.-8      	; 0xc8 <i2c_start+0x26>
  d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  d4:	88 7f       	andi	r24, 0xF8	; 248
  d6:	88 31       	cpi	r24, 0x18	; 24
  d8:	31 f0       	breq	.+12     	; 0xe6 <i2c_start+0x44>
  da:	80 34       	cpi	r24, 0x40	; 64
  dc:	31 f4       	brne	.+12     	; 0xea <i2c_start+0x48>
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 95       	ret
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	08 95       	ret
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	08 95       	ret

000000ee <i2c_start_wait>:
  ee:	94 ea       	ldi	r25, 0xA4	; 164
  f0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f8:	99 23       	and	r25, r25
  fa:	e4 f7       	brge	.-8      	; 0xf4 <i2c_start_wait+0x6>
  fc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 100:	98 7f       	andi	r25, 0xF8	; 248
 102:	98 30       	cpi	r25, 0x08	; 8
 104:	11 f0       	breq	.+4      	; 0x10a <i2c_start_wait+0x1c>
 106:	90 31       	cpi	r25, 0x10	; 16
 108:	91 f7       	brne	.-28     	; 0xee <i2c_start_wait>
 10a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 10e:	94 e8       	ldi	r25, 0x84	; 132
 110:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 114:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 118:	99 23       	and	r25, r25
 11a:	e4 f7       	brge	.-8      	; 0x114 <i2c_start_wait+0x26>
 11c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 120:	98 7f       	andi	r25, 0xF8	; 248
 122:	90 32       	cpi	r25, 0x20	; 32
 124:	11 f0       	breq	.+4      	; 0x12a <i2c_start_wait+0x3c>
 126:	98 35       	cpi	r25, 0x58	; 88
 128:	41 f4       	brne	.+16     	; 0x13a <i2c_start_wait+0x4c>
 12a:	94 e9       	ldi	r25, 0x94	; 148
 12c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 130:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 134:	94 fd       	sbrc	r25, 4
 136:	fc cf       	rjmp	.-8      	; 0x130 <i2c_start_wait+0x42>
 138:	da cf       	rjmp	.-76     	; 0xee <i2c_start_wait>
 13a:	08 95       	ret

0000013c <i2c_stop>:
 13c:	84 e9       	ldi	r24, 0x94	; 148
 13e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 142:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 146:	84 fd       	sbrc	r24, 4
 148:	fc cf       	rjmp	.-8      	; 0x142 <i2c_stop+0x6>
 14a:	08 95       	ret

0000014c <i2c_write>:
 14c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 150:	84 e8       	ldi	r24, 0x84	; 132
 152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 156:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 15a:	88 23       	and	r24, r24
 15c:	e4 f7       	brge	.-8      	; 0x156 <i2c_write+0xa>
 15e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 162:	88 7f       	andi	r24, 0xF8	; 248
 164:	88 32       	cpi	r24, 0x28	; 40
 166:	11 f0       	breq	.+4      	; 0x16c <i2c_write+0x20>
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	08 95       	ret
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret

00000170 <initialisePinOut>:
 170:	84 b1       	in	r24, 0x04	; 4
 172:	81 60       	ori	r24, 0x01	; 1
 174:	84 b9       	out	0x04, r24	; 4
 176:	08 95       	ret

00000178 <turnPiOn>:
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	85 b9       	out	0x05, r24	; 5
 17e:	08 95       	ret

00000180 <turnPiOff>:
 180:	85 b1       	in	r24, 0x05	; 5
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	85 b9       	out	0x05, r24	; 5
 186:	08 95       	ret

00000188 <initUSART>:
 188:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 18c:	87 e6       	ldi	r24, 0x67	; 103
 18e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 192:	88 e1       	ldi	r24, 0x18	; 24
 194:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 19e:	08 95       	ret

000001a0 <__vector_11>:
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <DS1307Init>:
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	18 2f       	mov	r17, r24
 1bc:	d6 2f       	mov	r29, r22
 1be:	c4 2f       	mov	r28, r20
 1c0:	80 ed       	ldi	r24, 0xD0	; 208
 1c2:	0e 94 51 00 	call	0xa2	; 0xa2 <i2c_start>
 1c6:	88 23       	and	r24, r24
 1c8:	19 f0       	breq	.+6      	; 0x1d0 <DS1307Init+0x1c>
 1ca:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_stop>
 1ce:	23 c0       	rjmp	.+70     	; 0x216 <DS1307Init+0x62>
 1d0:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_stop>
 1d4:	80 ed       	ldi	r24, 0xD0	; 208
 1d6:	0e 94 77 00 	call	0xee	; 0xee <i2c_start_wait>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_write>
 1e0:	81 2f       	mov	r24, r17
 1e2:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_write>
 1e6:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_stop>
 1ea:	80 ed       	ldi	r24, 0xD0	; 208
 1ec:	0e 94 77 00 	call	0xee	; 0xee <i2c_start_wait>
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_write>
 1f6:	8d 2f       	mov	r24, r29
 1f8:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_write>
 1fc:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_stop>
 200:	80 ed       	ldi	r24, 0xD0	; 208
 202:	0e 94 77 00 	call	0xee	; 0xee <i2c_start_wait>
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_write>
 20c:	8c 2f       	mov	r24, r28
 20e:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_write>
 212:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_stop>
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	08 95       	ret

0000021e <main>:

int main(void) {
	
	unsigned char ret;
	
	initUSART();
 21e:	0e 94 c4 00 	call	0x188	; 0x188 <initUSART>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 222:	80 e1       	ldi	r24, 0x10	; 16
 224:	97 e2       	ldi	r25, 0x27	; 39
 226:	05 c0       	rjmp	.+10     	; 0x232 <main+0x14>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 228:	e0 e9       	ldi	r30, 0x90	; 144
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0xe>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 230:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	c9 f7       	brne	.-14     	; 0x228 <main+0xa>
	_delay_ms(1000); //Temporary
	//initTimer();
	i2c_init();
 236:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_init>
	
	DS1307Init(0x00, 0x00, 0x00);
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DS1307Init>
	initialisePinOut();
 244:	0e 94 b8 00 	call	0x170	; 0x170 <initialisePinOut>
		//_delay_ms(5000); //Temporary
		//USART_TransmitPollingHoneywell(READVALUE);
		//_delay_ms(10000); //Temporary
		//USART_TransmitPollingHoneywell(STOPMEASUREMENT);
		
		turnPiOn();
 248:	0e 94 bc 00 	call	0x178	; 0x178 <turnPiOn>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 24c:	80 e2       	ldi	r24, 0x20	; 32
 24e:	9e e4       	ldi	r25, 0x4E	; 78
 250:	05 c0       	rjmp	.+10     	; 0x25c <main+0x3e>
 252:	e0 e9       	ldi	r30, 0x90	; 144
 254:	f1 e0       	ldi	r31, 0x01	; 1
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <main+0x38>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 25a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	c9 f7       	brne	.-14     	; 0x252 <main+0x34>
		_delay_ms(2000);
		turnPiOff();
 260:	0e 94 c0 00 	call	0x180	; 0x180 <turnPiOff>
    }
 264:	f1 cf       	rjmp	.-30     	; 0x248 <main+0x2a>

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
